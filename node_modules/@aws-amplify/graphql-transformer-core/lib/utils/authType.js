"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adoptAuthMode = exports.adoptAuthModes = void 0;
const aws_appsync_1 = require("@aws-cdk/aws-appsync");
const aws_cognito_1 = require("@aws-cdk/aws-cognito");
const core_1 = require("@aws-cdk/core");
const authTypeMap = {
    API_KEY: aws_appsync_1.AuthorizationType.API_KEY,
    AMAZON_COGNITO_USER_POOLS: aws_appsync_1.AuthorizationType.USER_POOL,
    AWS_IAM: aws_appsync_1.AuthorizationType.IAM,
    OPENID_CONNECT: aws_appsync_1.AuthorizationType.OIDC,
};
function adoptAuthModes(stack, authConfig) {
    var _a;
    return {
        defaultAuthorization: adoptAuthMode(stack, authConfig.defaultAuthentication),
        additionalAuthorizationModes: (_a = authConfig.additionalAuthenticationProviders) === null || _a === void 0 ? void 0 : _a.map(entry => adoptAuthMode(stack, entry)),
    };
}
exports.adoptAuthModes = adoptAuthModes;
function adoptAuthMode(stackManager, entry) {
    const authType = authTypeMap[entry.authenticationType];
    switch (entry.authenticationType) {
        case aws_appsync_1.AuthorizationType.API_KEY:
            return {
                authorizationType: authType,
                apiKeyConfig: {
                    description: entry.apiKeyConfig.description,
                    expires: core_1.Expiration.after(core_1.Duration.days(entry.apiKeyConfig.apiKeyExpirationDays))
                }
            };
        case aws_appsync_1.AuthorizationType.USER_POOL:
            const userPoolId = stackManager.addParameter('AuthCognitoUserPoolId', {
                type: 'String'
            }).valueAsString;
            const rootStack = stackManager.rootStack;
            return {
                authorizationType: authType,
                userPoolConfig: {
                    userPool: aws_cognito_1.UserPool.fromUserPoolId(rootStack, 'transformer-user-pool', userPoolId),
                },
            };
        case aws_appsync_1.AuthorizationType.IAM:
            return {
                authorizationType: authType,
            };
        case aws_appsync_1.AuthorizationType.OIDC:
            return {
                authorizationType: authType,
                openIdConnectConfig: {
                    oidcProvider: entry.openIDConnectConfig.issuerUrl,
                    clientId: entry.openIDConnectConfig.clientId,
                    tokenExpiryFromAuth: strToNumber(entry.openIDConnectConfig.authTTL),
                    tokenExpiryFromIssue: strToNumber(entry.openIDConnectConfig.iatTTL),
                },
            };
        default:
            throw new Error('Invalid auth config');
    }
}
exports.adoptAuthMode = adoptAuthMode;
function strToNumber(input) {
    if (typeof input === 'string') {
        return Number.parseInt(input, 10);
    }
    return input;
}
//# sourceMappingURL=authType.js.map