export declare const enum ConflictHandlerType {
    Optimistic = "OPTIMISTIC_CONCURRENCY",
    Automerge = "AUTOMERGE",
    Lambda = "LAMBDA"
}
export declare type ConflictDetectionType = 'VERSION' | 'NONE';
export declare type SyncConfigOptimistic = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.Optimistic;
};
export declare type SyncConfigServer = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.Automerge;
};
export declare type SyncConfigLambda = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.Lambda;
    LambdaConflictHandler: {
        name: string;
        region?: string;
        lambdaArn?: any;
    };
};
export declare type SyncConfig = SyncConfigOptimistic | SyncConfigServer | SyncConfigLambda;
export declare type ResolverConfig = {
    project?: SyncConfig;
    models?: Record<string, SyncConfig>;
};
export interface TransformConfig {
    StackMapping?: Record<string, string>;
    TransformerOptions?: {
        [transformer: string]: Record<string, any>;
    };
    ResolverConfig?: ResolverConfig;
    schema: string;
}
//# sourceMappingURL=transformer-config.d.ts.map