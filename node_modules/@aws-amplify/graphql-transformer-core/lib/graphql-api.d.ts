import { APIIAMResourceProvider, GraphQLAPIProvider, MappingTemplateProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { ElasticSearchDataSourceOptions } from '@aws-amplify/graphql-transformer-interfaces/src/graphql-api-provider';
import { ApiKeyConfig, AuthorizationConfig, AuthorizationMode, AuthorizationType, BaseDataSource, CfnApiKey, CfnResolver, DataSourceOptions, DynamoDbDataSource, GraphqlApiBase, HttpDataSource, HttpDataSourceOptions, LambdaDataSource, LogConfig, NoneDataSource } from '@aws-cdk/aws-appsync';
import { ITable } from '@aws-cdk/aws-dynamodb';
import { Grant, IGrantable, IRole } from '@aws-cdk/aws-iam';
import { IFunction, ILayerVersion, Runtime } from '@aws-cdk/aws-lambda';
import { CfnResource, Construct, Stack } from '@aws-cdk/core';
import { AppSyncFunctionConfiguration } from './appsync-function';
import { ElasticsearchDataSource } from './cdk-compat/elasticsearch-datasource';
import { TransformerSchema } from './cdk-compat/schema-asset';
export interface GraphqlApiProps {
    readonly name: string;
    readonly authorizationConfig?: AuthorizationConfig;
    readonly logConfig?: LogConfig;
    readonly schema?: TransformerSchema;
    readonly xrayEnabled?: boolean;
}
export declare class IamResource implements APIIAMResourceProvider {
    static custom(...arns: string[]): IamResource;
    static ofType(type: string, ...fields: string[]): IamResource;
    static all(): IamResource;
    private arns;
    private constructor();
    resourceArns(api: GraphQLAPIProvider): string[];
}
export declare type TransformerAPIProps = GraphqlApiProps & {
    readonly createApiKey?: boolean;
};
export declare class GraphQLApi extends GraphqlApiBase implements GraphQLAPIProvider {
    readonly apiId: string;
    readonly arn: string;
    readonly graphqlUrl: string;
    readonly name: string;
    readonly schema: TransformerSchema;
    readonly modes: AuthorizationType[];
    readonly apiKey?: string;
    private schemaResource;
    private api;
    private apiKeyResource?;
    private authorizationConfig?;
    private dataSources;
    constructor(scope: Construct, id: string, props: TransformerAPIProps);
    addElasticSearchDataSource(name: string, awsRegion: string, endpoint: string, options?: ElasticSearchDataSourceOptions, stack?: Stack): ElasticsearchDataSource;
    addHttpDataSource(name: string, endpoint: string, options?: DataSourceOptions, stack?: Stack): HttpDataSource;
    addDynamoDbDataSource(name: string, table: ITable, options?: DataSourceOptions, stack?: Stack): DynamoDbDataSource;
    addNoneDataSource(name: string, options?: DataSourceOptions, stack?: Stack): NoneDataSource;
    addLambdaDataSource(name: string, lambdaFunction: IFunction, options?: DataSourceOptions, stack?: Stack): LambdaDataSource;
    addAppSyncFunction(name: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, dataSourceName: string, stack?: Stack): AppSyncFunctionConfiguration;
    addLambdaFunction(functionName: string, functionKey: string, handlerName: string, filePath: string, runtime: Runtime, layers?: ILayerVersion[], role?: IRole, environment?: {
        [key: string]: string;
    }, stack?: Stack): IFunction;
    grant(grantee: IGrantable, resources: IamResource, ...actions: string[]): Grant;
    grantQuery(grantee: IGrantable, ...fields: string[]): Grant;
    grantMutation(grantee: IGrantable, ...fields: string[]): Grant;
    grantSubscription(grantee: IGrantable, ...fields: string[]): Grant;
    createAPIKey(config?: ApiKeyConfig): CfnApiKey;
    addToSchema(content: string): void;
    getDefaultAuthorization(): AuthorizationMode | undefined;
    addResolver(typeName: string, fieldName: string, requestMappingTemplate: MappingTemplateProvider, responseMappingTemplate: MappingTemplateProvider, dataSourceName?: string, pipelineConfig?: string[], stack?: Stack): CfnResolver;
    hasDataSource(name: string): boolean;
    getDataSource: (name: string) => BaseDataSource | void;
    protected doAddNoneDataSource(id: string, options?: DataSourceOptions, stack?: Stack): NoneDataSource;
    protected doAddDynamoDbDataSource(id: string, table: ITable, options?: DataSourceOptions, stack?: Stack): DynamoDbDataSource;
    protected doAddHttpDataSource(id: string, endpoint: string, options?: HttpDataSourceOptions, stack?: Stack): HttpDataSource;
    protected doAddElasticSearchDataSource(id: string, endpoint: string, region: string, options?: ElasticSearchDataSourceOptions, stack?: Stack): ElasticsearchDataSource;
    protected doAddLambdaDataSource(id: string, lambdaFunction: IFunction, options?: DataSourceOptions, stack?: Stack): LambdaDataSource;
    private validateAuthorizationProps;
    addSchemaDependency(construct: CfnResource): boolean;
    private setupLogConfig;
    private setupOpenIdConnectConfig;
    private setupUserPoolConfig;
    private setupAdditionalAuthorizationModes;
}
//# sourceMappingURL=graphql-api.d.ts.map