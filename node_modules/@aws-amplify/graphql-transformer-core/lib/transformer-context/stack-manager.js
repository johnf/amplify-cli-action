"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackManager = void 0;
const core_1 = require("@aws-cdk/core");
const cdk_compat_1 = require("../cdk-compat");
class StackManager {
    constructor(app, resourceMapping) {
        this.stacks = new Map();
        this.stackSynthesizer = new cdk_compat_1.TransformerStackSythesizer();
        this.paramMap = new Map();
        this.createStack = (stackName) => {
            const newStack = new cdk_compat_1.TransformerNestedStack(this.rootStack, stackName);
            return newStack;
        };
        this.getStackFor = (resourceId, defaultStackName) => {
            const stackName = this.resourceToStackMap.has(resourceId) ? this.resourceToStackMap.get(resourceId) : defaultStackName;
            if (stackName) {
                try {
                    this.getStack(stackName);
                }
                catch (e) {
                    return this.createStack(stackName);
                }
            }
            return this.rootStack;
        };
        this.getStack = (stackName) => {
            if (this.stacks.has(stackName)) {
                return this.stacks.get(stackName);
            }
            throw new Error(`Stack ${stackName} is not created`);
        };
        this.getCloudFormationTemplates = () => {
            return this.stackSynthesizer.collectStacks();
        };
        this.getMappingTemplates = () => {
            return this.stackSynthesizer.collectMappingTemplates();
        };
        this.addParameter = (name, props) => {
            const param = new core_1.CfnParameter(this.rootStack, name, props);
            this.paramMap.set(name, param);
            return param;
        };
        this.getParameter = (name) => {
            return this.paramMap.get(name);
        };
        this.rootStack = new cdk_compat_1.TransformerRootStack(app, 'transformer-root-stack', {
            synthesizer: this.stackSynthesizer,
        });
        this.resourceToStackMap = new Map(Object.entries(resourceMapping));
        this.addParameter('env', {
            default: 'NONE',
            type: 'String',
        });
    }
}
exports.StackManager = StackManager;
//# sourceMappingURL=stack-manager.js.map