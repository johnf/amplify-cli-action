"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const cdk = __importStar(require("@aws-cdk/core"));
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const FUNCTION_DIRECTIVE_STACK = 'FunctionDirectiveStack';
const directiveDefinition = `
  directive @function(name: String!, region: String) repeatable on FIELD_DEFINITION
`;
class FunctionTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor() {
        super('amplify-function-transformer', directiveDefinition);
        this.resolverGroups = new Map();
        this.field = (parent, definition, directive, acc) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                resolverTypeName: parent.name.value,
                resolverFieldName: definition.name.value,
            });
            let resolver = this.resolverGroups.get(definition);
            if (resolver === undefined) {
                resolver = [];
                this.resolverGroups.set(definition, resolver);
            }
            resolver.push(args);
        };
        this.generateResolvers = (context) => {
            if (this.resolverGroups.size === 0) {
                return;
            }
            const stack = context.stackManager.createStack(FUNCTION_DIRECTIVE_STACK);
            const createdResources = new Map();
            const env = context.stackManager.getParameter(graphql_transformer_common_1.ResourceConstants.PARAMETERS.Env);
            stack.templateOptions.templateFormatVersion = '2010-09-09';
            stack.templateOptions.description = 'An auto-generated nested stack for the @function directive.';
            new cdk.CfnCondition(stack, graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, {
                expression: cdk.Fn.conditionNot(cdk.Fn.conditionEquals(env, graphql_transformer_common_1.ResourceConstants.NONE)),
            });
            this.resolverGroups.forEach((resolverFns, fieldDefinition) => {
                resolverFns.forEach(config => {
                    const dataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(config.name, config.region);
                    if (!createdResources.has(dataSourceId)) {
                        const dataSource = context.api.addLambdaDataSource(dataSourceId, lambda.Function.fromFunctionAttributes(stack, `${dataSourceId}Function`, {
                            functionArn: lambdaArnResource(env, config.name, config.region),
                        }), {}, stack);
                        createdResources.set(dataSourceId, dataSource);
                    }
                    const functionId = graphql_transformer_common_1.FunctionResourceIDs.FunctionAppSyncFunctionConfigurationID(config.name, config.region);
                    let func = createdResources.get(functionId);
                    if (func === undefined) {
                        func = context.api.addAppSyncFunction(functionId, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(graphql_mapping_template_1.printBlock(`Invoke AWS Lambda data source: ${dataSourceId}`)(graphql_mapping_template_1.obj({
                            version: graphql_mapping_template_1.str('2018-05-29'),
                            operation: graphql_mapping_template_1.str('Invoke'),
                            payload: graphql_mapping_template_1.obj({
                                typeName: graphql_mapping_template_1.ref('ctx.stash.get("typeName")'),
                                fieldName: graphql_mapping_template_1.ref('ctx.stash.get("fieldName")'),
                                arguments: graphql_mapping_template_1.ref('util.toJson($ctx.arguments)'),
                                identity: graphql_mapping_template_1.ref('util.toJson($ctx.identity)'),
                                source: graphql_mapping_template_1.ref('util.toJson($ctx.source)'),
                                request: graphql_mapping_template_1.ref('util.toJson($ctx.request)'),
                                prev: graphql_mapping_template_1.ref('util.toJson($ctx.prev)'),
                            }),
                        })), `${functionId}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(graphql_mapping_template_1.printBlock('Handle error or return result')(graphql_mapping_template_1.compoundExpression([
                            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('ctx.error'), graphql_mapping_template_1.raw('$util.error($ctx.error.message, $ctx.error.type)')),
                            graphql_mapping_template_1.raw('$util.toJson($ctx.result)'),
                        ])), `${functionId}.res.vtl`), dataSourceId, stack);
                        createdResources.set(functionId, func);
                    }
                    const resolverId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(config.resolverTypeName, config.resolverFieldName);
                    let resolver = createdResources.get(resolverId);
                    if (resolver === undefined) {
                        resolver = context.api.addResolver(config.resolverTypeName, config.resolverFieldName, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(graphql_mapping_template_1.printBlock('Stash resolver specific context.')(graphql_mapping_template_1.compoundExpression([
                            graphql_mapping_template_1.qref(`$ctx.stash.put("typeName", "${config.resolverTypeName}")`),
                            graphql_mapping_template_1.qref(`$ctx.stash.put("fieldName", "${config.resolverFieldName}")`),
                            graphql_mapping_template_1.obj({}),
                        ])), `${config.resolverTypeName}.${config.resolverFieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString('$util.toJson($ctx.prev.result)', `${config.resolverTypeName}.${config.resolverFieldName}.res.vtl`), undefined, [], stack);
                        createdResources.set(resolverId, resolver);
                    }
                    resolver.pipelineConfig.functions.push(func.functionId);
                });
            });
        };
    }
}
exports.FunctionTransformer = FunctionTransformer;
function lambdaArnResource(env, name, region) {
    const substitutions = {};
    if (name.includes('${env}')) {
        substitutions.env = env;
    }
    return cdk.Fn.conditionIf(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cdk.Fn.sub(lambdaArnKey(name, region), substitutions), cdk.Fn.sub(lambdaArnKey(name.replace(/(-\${env})/, ''), region))).toString();
}
function lambdaArnKey(name, region) {
    return `arn:aws:lambda:${region ? region : '${AWS::Region}'}:\${AWS::AccountId}:function:${name}`;
}
//# sourceMappingURL=graphql-function-transformer.js.map