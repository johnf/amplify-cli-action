import { ArgumentNode, DirectiveNode, FieldDefinitionNode, InputValueDefinitionNode, NameNode, ObjectTypeDefinitionNode, StringValueNode, TypeNode, ValueNode, Location, InputObjectTypeDefinitionNode, NamedTypeNode, EnumTypeDefinitionNode } from 'graphql';
export declare class ArgumentWrapper {
    readonly name: NameNode;
    readonly value: ValueNode;
    constructor(argument: ArgumentNode);
    serialize: () => ArgumentNode;
}
export declare class DirectiveWrapper {
    private arguments;
    private name;
    private location?;
    constructor(node: DirectiveNode);
    serialize: () => DirectiveNode;
    getArguments: <T>(defaultValue: Required<T>) => Required<T>;
}
export declare class GenericFieldWrapper {
    protected type: TypeNode;
    readonly directives: DirectiveWrapper[];
    loc?: Location;
    name: string;
    constructor(field: FieldDefinitionNode | InputValueDefinitionNode);
    isList: () => boolean;
    isNonNullable: () => boolean;
    makeNullable: () => boolean;
    makeNonNullable: () => boolean;
    wrapListType: () => GenericFieldWrapper;
    unWrapListType: () => boolean;
    getBaseType: () => NamedTypeNode;
    getTypeName: () => string;
    isScalar: () => boolean;
}
export declare class InputFieldWraper extends GenericFieldWrapper {
    protected field: InputValueDefinitionNode;
    readonly argumenets?: InputValueDefinitionNode[];
    readonly description?: StringValueNode;
    type: TypeNode;
    readonly name: string;
    readonly loc?: Location;
    constructor(field: InputValueDefinitionNode);
    serialize: () => InputValueDefinitionNode;
    static fromField: (name: string, field: FieldDefinitionNode) => InputFieldWraper;
    static create: (name: string, type: string, isNullable?: boolean, isList?: boolean) => InputFieldWraper;
}
export declare class FieldWrapper extends GenericFieldWrapper {
    readonly argumenets?: InputValueDefinitionNode[];
    readonly description?: StringValueNode;
    readonly loc?: Location;
    constructor(field: FieldDefinitionNode);
    serialize: () => FieldDefinitionNode;
    static create: (name: string, type: string, isNullable?: boolean, isList?: boolean) => FieldWrapper;
}
export declare class ObjectDefinationWrapper {
    private node;
    readonly directives?: DirectiveWrapper[];
    readonly fields: FieldWrapper[];
    readonly name: string;
    constructor(node: ObjectTypeDefinitionNode);
    serialize: () => ObjectTypeDefinitionNode;
    hasField: (name: string) => boolean;
    getField: (name: string) => FieldWrapper;
    addField: (field: FieldWrapper) => void;
    removeField: (field: FieldWrapper) => void;
    static create: (name: string, fields?: FieldDefinitionNode[], directives?: DirectiveNode[]) => ObjectDefinationWrapper;
}
export declare class InputObjectDefinitionWrapper {
    private node;
    readonly directives?: DirectiveWrapper[];
    readonly fields: InputFieldWraper[];
    readonly name: string;
    constructor(node: InputObjectTypeDefinitionNode);
    serialize: () => InputObjectTypeDefinitionNode;
    hasField: (name: string) => boolean;
    getField: (name: string) => InputFieldWraper;
    addField: (field: InputFieldWraper) => void;
    removeField: (field: InputFieldWraper) => void;
    static create: (name: string, fields?: InputValueDefinitionNode[], directives?: DirectiveNode[]) => InputObjectDefinitionWrapper;
    static fromObject: (name: string, def: ObjectTypeDefinitionNode) => InputObjectDefinitionWrapper;
}
export declare class EnumWrapper {
    private node;
    readonly name: string;
    values: string[];
    directives: DirectiveWrapper[];
    constructor(node: EnumTypeDefinitionNode);
    addValue: (value: string) => void;
    serialize: () => EnumTypeDefinitionNode;
    static create: (name: string, values?: string[]) => EnumWrapper;
}
//# sourceMappingURL=object-definition-wrapper.d.ts.map