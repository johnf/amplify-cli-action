"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateListRequestTemplate = exports.generateGetRequestTemplate = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const generateGetRequestTemplate = () => {
    const statements = [
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('GetRequest'), graphql_mapping_template_1.obj({ version: graphql_mapping_template_1.str('2018-05-29'), operation: graphql_mapping_template_1.str('GetItem') })),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelKeyObject'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Key'), graphql_mapping_template_1.ref('ctx.stash.metadata.modelKeyObject')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('key'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toDynamoDB'), graphql_mapping_template_1.ref('ctx.args.id')) }))])),
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('GetRequest.put'), graphql_mapping_template_1.str('key'), graphql_mapping_template_1.ref('key'))),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref('GetRequest')),
    ];
    return graphql_mapping_template_1.printBlock('Get Request template')(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateGetRequestTemplate = generateGetRequestTemplate;
const generateListRequestTemplate = () => {
    const requestVariable = 'ListRequest';
    const modelQueryObj = 'ctx.stash.modelQuery';
    const indexNameVariable = 'ctx.stash.metadata.index';
    const expression = graphql_mapping_template_1.compoundExpression([
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('limit'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`util.defaultIfNull`), graphql_mapping_template_1.ref('context.args.limit'), graphql_mapping_template_1.int(100))),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(requestVariable), graphql_mapping_template_1.obj({
            version: graphql_mapping_template_1.str('2018-05-29'),
            limit: graphql_mapping_template_1.ref('limit'),
        })),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.nextToken'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.nextToken`), graphql_mapping_template_1.ref('context.args.nextToken'))),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.filter'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`filterExpression`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.parseJson'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.transform.toDynamoDBFilterExpression'), graphql_mapping_template_1.ref('$ctx.args.filter')))),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNullOrBlank'), graphql_mapping_template_1.ref('filterExpression.expression'))), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('filterEpression.expressionValues.size')), graphql_mapping_template_1.int(0)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('filterEpression.remove'), graphql_mapping_template_1.str('expressionValues')))),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.filter`), graphql_mapping_template_1.ref(`filterExpression`)),
            ])),
        ])),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('$util.isNull'), graphql_mapping_template_1.ref(modelQueryObj))), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Query'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.parseJson'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.transform.toDynamoDBFilterExpression'), graphql_mapping_template_1.ref(modelQueryObj)))),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${requestVariable}.put`), graphql_mapping_template_1.str('operation'), graphql_mapping_template_1.str('Query'))),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${requestVariable}.put`), graphql_mapping_template_1.str('query'), graphql_mapping_template_1.ref('Query'))),
            graphql_mapping_template_1.ifElse(graphql_mapping_template_1.and([graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.args.sortDirection'))), graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('ctx.args.sortDirection'), graphql_mapping_template_1.str('DESC'))]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.scanIndexForward`), graphql_mapping_template_1.bool(false)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.scanIndexForward`), graphql_mapping_template_1.bool(true))),
        ]), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${requestVariable}.put`), graphql_mapping_template_1.str('operation'), graphql_mapping_template_1.str('Scan')))),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref(indexNameVariable))), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.IndexName`), graphql_mapping_template_1.ref(indexNameVariable))),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref(requestVariable)),
    ]);
    return graphql_mapping_template_1.printBlock('List Request')(expression);
};
exports.generateListRequestTemplate = generateListRequestTemplate;
//# sourceMappingURL=query.js.map