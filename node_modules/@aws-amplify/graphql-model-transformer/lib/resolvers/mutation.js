"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUpdateInitSlotTemplate = exports.generateDeleteRequestTemplate = exports.generateCreateInitSlotTemplate = exports.generateCreateRequestTemplate = exports.generateUpdateRequestTemplate = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const common_1 = require("./common");
const generateUpdateRequestTemplate = (modelName) => {
    const objectKeyVariable = 'ctx.stash.metadata.modelObjetKey';
    const keyFields = [graphql_mapping_template_1.str('id')];
    const statements = [
        graphql_mapping_template_1.comment('Set the default values to put request'),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('mergedValues'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref('ctx.stash.defaultValues'), graphql_mapping_template_1.obj({}))),
        graphql_mapping_template_1.comment('copy the values from input'),
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('mergedValues.putAll'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref('ctx.args.input'), graphql_mapping_template_1.obj({})))),
        graphql_mapping_template_1.comment('set the typename'),
        graphql_mapping_template_1.comment('Initialize the vars for creating ddb expression'),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expNames'), graphql_mapping_template_1.obj({})),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expValues'), graphql_mapping_template_1.obj({})),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expSet'), graphql_mapping_template_1.obj({})),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expAdd'), graphql_mapping_template_1.obj({})),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expRemove'), graphql_mapping_template_1.list([])),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(objectKeyVariable), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Key'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toDynamoDB'), graphql_mapping_template_1.ref(objectKeyVariable))), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Key'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toDynamoDB'), graphql_mapping_template_1.ref('ctx.args.input.id')) }))),
        graphql_mapping_template_1.comment('Model key'),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(objectKeyVariable), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`${objectKeyVariable}.entrySet()`), [graphql_mapping_template_1.qref('$keyFields.add("$entry.key")')])]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('keyFields'), graphql_mapping_template_1.list(keyFields))),
        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet()`), [
            graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('util.isNull($entry.value)'), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('discard'), graphql_mapping_template_1.ref(`expRemove.add("#$entry.key")`)), graphql_mapping_template_1.qref(`$expNames.put("#$entry.key", "$entry.key")`)]), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.qref(`$expSet.put("#$entry.key", ":$entry.key")`),
                graphql_mapping_template_1.qref(`$expNames.put("#$entry.key", "$entry.key")`),
                graphql_mapping_template_1.qref(`$expValues.put(":$entry.key", $util.dynamodb.toDynamoDB($entry.value))`),
            ])),
        ]),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('')),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$expSet.isEmpty()'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('SET')),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref('expSet.entrySet()'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression $entry.key = $entry.value')),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('foreach.hasNext()'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression,'))),
            ]),
        ])),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$expAdd.isEmpty()'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression ADD')),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref('expAdd.entrySet()'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression $entry.key $entry.value')),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('foreach.hasNext()'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression,'))),
            ]),
        ])),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$expRemove.isEmpty()'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression REMOVE')),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref('expRemove'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression $entry')),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('foreach.hasNext()'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expression'), graphql_mapping_template_1.str('$expression,'))),
            ]),
        ])),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('update'), graphql_mapping_template_1.obj({})),
        graphql_mapping_template_1.qref('$update.put("expression", "$expression")'),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$expNames.isEmpty()'), graphql_mapping_template_1.qref('$update.put("expressionNames", $expNames)')),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$expValues.isEmpty()'), graphql_mapping_template_1.qref('$update.put("expressionValues", $expValues)')),
        graphql_mapping_template_1.comment('Begin - key condition'),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('keyConditionExpr'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`ctx.stash.metadata.modelObjectKey.entrySet()`), [
                graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('keyConditionExpr.put'), graphql_mapping_template_1.str('$entry.key'), graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(true) }))),
            ]),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('keyConditionExpr'))),
        ]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(true) }) })))])),
        graphql_mapping_template_1.comment('End - key condition'),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.condition'), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('context.args.condition')))),
        common_1.generateConditionSlot('ctx.stash.conditions', 'Conditions'),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('UpdateItem'), graphql_mapping_template_1.obj({
            version: graphql_mapping_template_1.str('2018-05-29'),
            operation: graphql_mapping_template_1.str('UpdateItem'),
            key: graphql_mapping_template_1.ref('Key'),
            update: graphql_mapping_template_1.ref('update'),
        })),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('Conditions'), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('UpdateItem.put'), graphql_mapping_template_1.str('condition'), graphql_mapping_template_1.ref('Conditions')))),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref('UpdateItem')),
    ];
    return graphql_mapping_template_1.printBlock(`${modelName} Update resolver`)(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateUpdateRequestTemplate = generateUpdateRequestTemplate;
const generateCreateRequestTemplate = (modelName) => {
    const statements = [
        graphql_mapping_template_1.comment('Begin - KeyCondition'),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('keyConditionExpr'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`ctx.stash.metadata.modelObjectKey.entrySet()`), [
                graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('keyConditionExpr.add'), graphql_mapping_template_1.str('$entry.key'), graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(true) }))),
            ]),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('keyConditionExpr'))),
        ]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(false) }) })))])),
        graphql_mapping_template_1.comment('End - KeyCondition'),
        graphql_mapping_template_1.comment('Set the default values to put request'),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('mergedValues'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref('ctx.stash.defaultValues'), graphql_mapping_template_1.obj({}))),
        graphql_mapping_template_1.comment('copy the values from input'),
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('mergedValues.putAll'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref('ctx.args.input'), graphql_mapping_template_1.obj({})))),
        graphql_mapping_template_1.comment('set the typename'),
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('mergedValues.put'), graphql_mapping_template_1.str('__typename'), graphql_mapping_template_1.str(modelName))),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('PutObject'), graphql_mapping_template_1.obj({
            version: graphql_mapping_template_1.str('2018-05-29'),
            operation: graphql_mapping_template_1.str('PutItem'),
            attributeValues: graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toMapValues'), graphql_mapping_template_1.ref('mergedValues')),
            condition: graphql_mapping_template_1.ref('condition'),
        })),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.condition'), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('context.args.condition')))),
        graphql_mapping_template_1.comment('Begin - KeyCondtion'),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('keyConditionExpr'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`ctx.stash.metadata.modelObjectKey.entrySet()`), [
                graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('keyConditionExpr.put'), graphql_mapping_template_1.str('$entry.key'), graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(false) }))),
            ]),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('keyConditionExpr'))),
        ]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(false) }) })))])),
        graphql_mapping_template_1.comment('End - KeyCondition'),
        common_1.generateConditionSlot('ctx.stash.conditions', 'Conditions'),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('Conditions'), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('PutObject.put'), graphql_mapping_template_1.str('condition'), graphql_mapping_template_1.ref('Conditions')))),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObject'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('PutObject.put'), graphql_mapping_template_1.str('id'), graphql_mapping_template_1.ref('ctx.stash.metadata.modelObject')), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Key'), graphql_mapping_template_1.obj({
                id: graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toDynamoDB'), graphql_mapping_template_1.ref('mergedValues.id')),
            })),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('PutObject.put'), graphql_mapping_template_1.str('key'), graphql_mapping_template_1.ref('Key'))),
        ])),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref('PutObject')),
    ];
    return graphql_mapping_template_1.printBlock('Create Request template')(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateCreateRequestTemplate = generateCreateRequestTemplate;
const generateCreateInitSlotTemplate = (name, modelConfig) => {
    const statements = [
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('defaultValues'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref('ctx.stash.defaultValues'), graphql_mapping_template_1.obj({})))),
    ];
    if (modelConfig === null || modelConfig === void 0 ? void 0 : modelConfig.timestamps) {
        statements.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref('createdAt'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.time.nowISO8601'))));
        statements.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.defaultValues.put'), graphql_mapping_template_1.str('id'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.autoId')))));
        if (modelConfig.timestamps.createdAt) {
            statements.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.defaultValues.put'), graphql_mapping_template_1.str(modelConfig.timestamps.createdAt), graphql_mapping_template_1.ref('createdAt'))));
        }
        if (modelConfig.timestamps.updatedAt) {
            statements.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.defaultValues.put'), graphql_mapping_template_1.str(modelConfig.timestamps.updatedAt), graphql_mapping_template_1.ref('createdAt'))));
        }
    }
    statements.push(graphql_mapping_template_1.toJson(graphql_mapping_template_1.obj({
        version: graphql_mapping_template_1.str('2018-05-29'),
        payload: graphql_mapping_template_1.obj({}),
    })));
    return graphql_mapping_template_1.printBlock('Initialization default values')(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateCreateInitSlotTemplate = generateCreateInitSlotTemplate;
const generateDeleteRequestTemplate = () => {
    const statements = [
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('DeleteRequest'), graphql_mapping_template_1.obj({
            version: graphql_mapping_template_1.str('2018-05-29'),
            operation: graphql_mapping_template_1.str('DeleteItem'),
        })),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Key'), graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey')), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('Key'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toDynamoDB'), graphql_mapping_template_1.ref('ctx.args.input.id')) }))),
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('DeleteRequest.put'), graphql_mapping_template_1.str('key'), graphql_mapping_template_1.ref('Key'))),
        graphql_mapping_template_1.comment('Begin - key condition'),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('keyConditionExpr'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`ctx.stash.metadata.modelObjectKey.entrySet()`), [
                graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('keyConditionExpr.put'), graphql_mapping_template_1.str('$entry.key'), graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(true) }))),
            ]),
            graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('keyConditionExpr'))),
        ]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.obj({ attributeExists: graphql_mapping_template_1.bool(true) }) })))])),
        graphql_mapping_template_1.comment('End - key condition'),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.condition'), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.conditions.add'), graphql_mapping_template_1.ref('context.args.condition')))),
        common_1.generateConditionSlot('ctx.stash.conditions', 'Conditions'),
        graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('Conditions'), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('DeleteRequest.put'), graphql_mapping_template_1.str('condition'), graphql_mapping_template_1.ref('Conditions')))),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref('DeleteRequest')),
    ];
    return graphql_mapping_template_1.printBlock('Delete Request template')(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateDeleteRequestTemplate = generateDeleteRequestTemplate;
const generateUpdateInitSlotTemplate = (modelName, modelConfig) => {
    const statements = [
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('defaultValues'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref('ctx.stash.defaultValues'), graphql_mapping_template_1.obj({})))),
    ];
    if (modelConfig === null || modelConfig === void 0 ? void 0 : modelConfig.timestamps) {
        if (modelConfig.timestamps.updatedAt) {
            statements.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref('updatedAt'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.time.nowISO8601'))));
            statements.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.defaultValues.put'), graphql_mapping_template_1.str(modelConfig.timestamps.updatedAt), graphql_mapping_template_1.ref('updatedAt'))));
        }
    }
    statements.push(graphql_mapping_template_1.toJson(graphql_mapping_template_1.obj({
        version: graphql_mapping_template_1.str('2018-05-29'),
        payload: graphql_mapping_template_1.obj({}),
    })));
    return graphql_mapping_template_1.printBlock('Initialization default values')(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateUpdateInitSlotTemplate = generateUpdateInitSlotTemplate;
//# sourceMappingURL=mutation.js.map