"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelTransformer = exports.directiveDefinition = exports.SubscriptionLevel = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_interfaces_1 = require("@aws-amplify/graphql-transformer-interfaces");
const aws_dynamodb_1 = require("@aws-cdk/aws-dynamodb");
const core_1 = require("@aws-cdk/core");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_types_1 = require("./graphql-types");
const resolvers_1 = require("./resolvers");
const query_1 = require("./resolvers/query");
const object_definition_wrapper_1 = require("./wrappers/object-definition-wrapper");
var SubscriptionLevel;
(function (SubscriptionLevel) {
    SubscriptionLevel["off"] = "off";
    SubscriptionLevel["public"] = "public";
    SubscriptionLevel["on"] = "on";
})(SubscriptionLevel = exports.SubscriptionLevel || (exports.SubscriptionLevel = {}));
exports.directiveDefinition = `
  directive @model(
    queries: ModelQueryMap
    mutations: ModelMutationMap
    subscriptions: ModelSubscriptionMap
    timestamps: TimestampConfiguration
  ) on OBJECT
  input ModelMutationMap {
    create: String
    update: String
    delete: String
  }
  input ModelQueryMap {
    get: String
    list: String
  }
  input ModelSubscriptionMap {
    onCreate: [String]
    onUpdate: [String]
    onDelete: [String]
    level: ModelSubscriptionLevel
  }
  enum ModelSubscriptionLevel {
    off
    public
    on
  }
  input TimestampConfiguration {
    createdAt: String
    updatedAt: String
  }
`;
class ModelTransformer extends graphql_transformer_core_1.TransformerModelBase {
    constructor() {
        super('amplify-model-transformer', exports.directiveDefinition);
        this.datasourceMap = {};
        this.ddbTableMap = {};
        this.resolverMap = {};
        this.typesWithModelDirective = new Set();
        this.modelDirectiveConfig = new Map();
        this.object = (definition, directive) => {
            const typeName = definition.name.value;
            const directiveWrapped = new object_definition_wrapper_1.DirectiveWrapper(directive);
            const options = directiveWrapped.getArguments({
                queries: {
                    get: graphql_transformer_common_1.toCamelCase(['get', typeName]),
                    list: graphql_transformer_common_1.toCamelCase(['list', `${typeName}s`]),
                },
                mutations: {
                    create: graphql_transformer_common_1.toCamelCase(['create', typeName]),
                    update: graphql_transformer_common_1.toCamelCase(['update', typeName]),
                    delete: graphql_transformer_common_1.toCamelCase(['delete', typeName]),
                },
                subscriptions: {
                    level: SubscriptionLevel.public,
                    onCreate: graphql_transformer_common_1.toCamelCase(['onCreate', typeName]),
                    onDelete: graphql_transformer_common_1.toCamelCase(['onDelete', typeName]),
                    onUpdate: graphql_transformer_common_1.toCamelCase(['onUpdate', typeName]),
                },
                timestamps: {
                    createdAt: 'createdAt',
                    updatedAt: 'updatedAt',
                },
            });
            this.modelDirectiveConfig.set(typeName, options);
            this.typesWithModelDirective.add(typeName);
        };
        this.validate = () => { };
        this.prepare = (context) => {
            for (const modelTypeName of this.typesWithModelDirective) {
                const type = context.output.getObject(modelTypeName);
                context.providerRegistry.registerDataSourceProvider(type, this);
            }
        };
        this.transformSchema = (ctx) => {
            graphql_types_1.addModelConditionInputs(ctx);
            for (const type of this.typesWithModelDirective) {
                const def = ctx.output.getObject(type);
                this.createNonModelInputs(ctx, def);
                const queryFields = this.getQueryFieldNames(ctx, def);
                for (const queryField of queryFields.values()) {
                    const outputType = this.getOutputType(ctx, def, queryField);
                    const args = this.getInputs(ctx, def, {
                        fieldName: queryField.fieldName,
                        typeName: queryField.typeName,
                        type: queryField.type,
                    });
                    const getField = graphql_transformer_common_1.makeField(queryField.fieldName, args, graphql_transformer_common_1.makeNamedType(outputType.name.value));
                    ctx.output.addQueryFields([getField]);
                }
                const mutationFields = this.getMutationFieldNames(ctx, def);
                for (const mutationField of mutationFields) {
                    const args = this.getInputs(ctx, def, {
                        fieldName: mutationField.fieldName,
                        typeName: mutationField.typeName,
                        type: mutationField.type,
                    });
                    const field = graphql_transformer_common_1.makeField(mutationField.fieldName, args, graphql_transformer_common_1.makeNamedType(def.name.value));
                    ctx.output.addMutationFields([field]);
                }
                const getMutationName = (subscriptionType, mutationMap) => {
                    const mutationToSubscriptionTypeMap = {
                        [graphql_transformer_interfaces_1.SubscriptionFieldType.ON_CREATE]: graphql_transformer_interfaces_1.MutationFieldType.CREATE,
                        [graphql_transformer_interfaces_1.SubscriptionFieldType.ON_UPDATE]: graphql_transformer_interfaces_1.MutationFieldType.UPDATE,
                        [graphql_transformer_interfaces_1.SubscriptionFieldType.ON_DELETE]: graphql_transformer_interfaces_1.MutationFieldType.DELETE,
                    };
                    const mutation = Array.from(mutationMap).find(m => m.type == mutationToSubscriptionTypeMap[subscriptionType]);
                    if (mutation) {
                        return mutation.fieldName;
                    }
                    throw new Error('Unknow Subscription type');
                };
                const subscriptionsFields = this.getSubscriptionFieldNames(ctx, def);
                for (const subscriptionsField of subscriptionsFields) {
                    const args = this.getInputs(ctx, def, {
                        fieldName: subscriptionsField.fieldName,
                        typeName: subscriptionsField.typeName,
                        type: subscriptionsField.type,
                    });
                    const mutationName = getMutationName(subscriptionsField.type, mutationFields);
                    const directive = graphql_transformer_common_1.makeDirective('aws_subscribe', [graphql_transformer_common_1.makeArgument('mutations', graphql_transformer_common_1.makeValueNode([mutationName]))]);
                    const field = graphql_transformer_common_1.makeField(subscriptionsField.fieldName, args, graphql_transformer_common_1.makeNamedType(def.name.value), [directive]);
                    ctx.output.addSubscriptionFields([field]);
                }
                this.addAutoGeneratableFields(ctx, type);
            }
        };
        this.generateResolvers = (context) => {
            for (let type of this.typesWithModelDirective) {
                const def = context.output.getObject(type);
                const tableLogicalName = `${def.name.value}Table`;
                const tableName = context.resourceHelper.generateResourceName(def.name.value);
                const stack = context.stackManager.getStackFor(tableLogicalName, def.name.value);
                const table = new aws_dynamodb_1.Table(stack, tableLogicalName, {
                    tableName,
                    partitionKey: {
                        name: 'id',
                        type: aws_dynamodb_1.AttributeType.STRING,
                    },
                    stream: aws_dynamodb_1.StreamViewType.NEW_AND_OLD_IMAGES,
                    encryption: aws_dynamodb_1.TableEncryption.DEFAULT,
                    removalPolicy: core_1.RemovalPolicy.DESTROY,
                });
                const dataSource = context.api.addDynamoDbDataSource(`${def.name.value}DS`, table, {
                    name: `${def.name.value}DS`,
                }, stack);
                context.dataSources.add(def, dataSource);
                const queryFields = this.getQueryFieldNames(context, def);
                this.datasourceMap[def.name.value] = dataSource;
                for (let query of queryFields.values()) {
                    let resolver;
                    switch (query.type) {
                        case graphql_transformer_interfaces_1.QueryFieldType.GET:
                            resolver = this.generateGetResolver(context, def, query.typeName, query.fieldName);
                            break;
                        case graphql_transformer_interfaces_1.QueryFieldType.LIST:
                            resolver = this.generateListResolver(context, def, query.typeName, query.fieldName);
                            break;
                        case graphql_transformer_interfaces_1.QueryFieldType.SYNC:
                            resolver = this.generateSyncResolver(context, def, query.typeName, query.fieldName);
                            break;
                        default:
                            throw new Error('Unkown query field type');
                    }
                    resolver.mapToStack(stack);
                    context.resolvers.addResolver(query.typeName, query.fieldName, resolver);
                }
                const mutationFields = this.getMutationFieldNames(context, def);
                for (let mutation of mutationFields.values()) {
                    let resolver;
                    switch (mutation.type) {
                        case graphql_transformer_interfaces_1.MutationFieldType.CREATE:
                            resolver = this.generateCreateResolver(context, def, mutation.typeName, mutation.fieldName);
                            break;
                        case graphql_transformer_interfaces_1.MutationFieldType.DELETE:
                            resolver = this.generateDeleteResolver(context, def, mutation.typeName, mutation.fieldName);
                            break;
                        case graphql_transformer_interfaces_1.MutationFieldType.UPDATE:
                            resolver = this.generateUpdateResolver(context, def, mutation.typeName, mutation.fieldName);
                            break;
                        default:
                            throw new Error('Unkown query field type');
                    }
                    resolver.mapToStack(stack);
                    context.resolvers.addResolver(mutation.typeName, mutation.fieldName, resolver);
                }
                const subscriptionsFields = this.getSubscriptionFieldNames(context, def);
                for (let subscription of subscriptionsFields.values()) {
                    let resolver;
                    switch (subscription.type) {
                        case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_CREATE:
                            resolver = this.generateOnCreateResolver(context, def, subscription.typeName, subscription.fieldName);
                            break;
                        case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_DELETE:
                            resolver = this.generateOnDeleteResolver(context, def, subscription.typeName, subscription.fieldName);
                            break;
                        case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_UPDATE:
                            resolver = this.generateOnUpdateResolver(context, def, subscription.typeName, subscription.fieldName);
                            break;
                        default:
                            throw new Error('Unkown query field type');
                    }
                    resolver.mapToStack(stack);
                    context.resolvers.addResolver(subscription.typeName, subscription.fieldName, resolver);
                }
            }
        };
        this.generateGetResolver = (ctx, type, typeName, fieldName) => {
            const dataSource = this.datasourceMap[type.name.value];
            const resolverKey = `Get${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateQueryResolver(typeName, fieldName, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(query_1.generateGetRequestTemplate(), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateDefaultResponseMappingTemplate(), `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.generateListResolver = (ctx, type, typeName, fieldName) => {
            const dataSource = this.datasourceMap[type.name.value];
            const resolverKey = `List${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateQueryResolver(typeName, fieldName, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(query_1.generateListRequestTemplate(), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateDefaultResponseMappingTemplate(), `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.generateUpdateResolver = (ctx, type, typeName, fieldName) => {
            const dataSource = this.datasourceMap[type.name.value];
            const resolverKey = `Update${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                const resolver = ctx.resolvers.generateMutationResolver(typeName, fieldName, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateUpdateRequestTemplate(typeName), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateDefaultResponseMappingTemplate(), `${typeName}.${fieldName}.res.vtl`));
                resolver.addToSlot('init', graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateUpdateInitSlotTemplate(type.name.value, this.modelDirectiveConfig.get(type.name.value)), `${typeName}.${fieldName}.{slotName}.{slotIndex}.req.vtl`));
                this.resolverMap[resolverKey] = resolver;
            }
            return this.resolverMap[resolverKey];
        };
        this.generateDeleteResolver = (ctx, type, typeName, fieldName) => {
            const dataSource = this.datasourceMap[type.name.value];
            const resolverKey = `update${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateQueryResolver(typeName, fieldName, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateDeleteRequestTemplate(), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateDefaultResponseMappingTemplate(), `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.generateOnCreateResolver = (ctx, type, typeName, fieldName) => {
            const resolverKey = `OnCreate${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateSubscriptionResolver(typeName, fieldName, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateSubscriptionRequestTemplate(), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateSubscriptionResponseTemplate(), `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.generateOnUpdateResolver = (ctx, type, typeName, fieldName) => {
            const resolverKey = `OnUpdate${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateSubscriptionResolver(typeName, fieldName, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateSubscriptionRequestTemplate(), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateSubscriptionResponseTemplate(), `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.generateOnDeleteResolver = (ctx, type, typeName, fieldName) => {
            const resolverKey = `OnDelete${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateSubscriptionResolver(typeName, fieldName, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateSubscriptionRequestTemplate(), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateSubscriptionResponseTemplate(), `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.generateSyncResolver = (ctx, type, typeName, fieldName) => {
            const dataSource = this.datasourceMap[typeName];
            const resolverKey = `Sync${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                this.resolverMap[resolverKey] = ctx.resolvers.generateQueryResolver(typeName, fieldName, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString('{}', `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString('{}', `${typeName}.${fieldName}.res.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.getQueryFieldNames = (ctx, type) => {
            var _a, _b;
            const typeName = type.name.value;
            const fields = new Set();
            const modelDirectiveConfig = this.modelDirectiveConfig.get(type.name.value);
            if ((_a = modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.queries) === null || _a === void 0 ? void 0 : _a.get) {
                fields.add({
                    typeName: 'Query',
                    fieldName: modelDirectiveConfig.queries.get || graphql_transformer_common_1.toCamelCase(['get', typeName]),
                    type: graphql_transformer_interfaces_1.QueryFieldType.GET,
                });
            }
            if ((_b = modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.queries) === null || _b === void 0 ? void 0 : _b.list) {
                fields.add({
                    typeName: 'Query',
                    fieldName: modelDirectiveConfig.queries.list || graphql_transformer_common_1.toCamelCase(['list', typeName]),
                    type: graphql_transformer_interfaces_1.QueryFieldType.LIST,
                });
            }
            return fields;
        };
        this.getMutationFieldNames = (ctx, type) => {
            const typeName = type.name.value;
            const modelDirectiveConfig = this.modelDirectiveConfig.get(typeName);
            const getMuationType = (type) => {
                switch (type) {
                    case 'create':
                        return graphql_transformer_interfaces_1.MutationFieldType.CREATE;
                    case 'update':
                        return graphql_transformer_interfaces_1.MutationFieldType.UPDATE;
                    case 'delete':
                        return graphql_transformer_interfaces_1.MutationFieldType.DELETE;
                    default:
                        throw new Error('Unknow mutation type');
                }
            };
            const fieldNames = new Set();
            for (let [mutationType, mutationName] of Object.entries((modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.mutations) || {})) {
                if (mutationName) {
                    fieldNames.add({
                        typeName: 'Mutation',
                        fieldName: mutationName,
                        type: getMuationType(mutationType),
                    });
                }
            }
            return fieldNames;
        };
        this.getSubscriptionFieldNames = (ctx, type) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const fields = new Set();
            const modelDirectiveConfig = this.modelDirectiveConfig.get(type.name.value);
            if (((_a = modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.subscriptions) === null || _a === void 0 ? void 0 : _a.level) !== SubscriptionLevel.off) {
                if (((_b = modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.subscriptions) === null || _b === void 0 ? void 0 : _b.onCreate) && ((_c = modelDirectiveConfig.mutations) === null || _c === void 0 ? void 0 : _c.create)) {
                    fields.add({
                        typeName: 'Subscription',
                        fieldName: modelDirectiveConfig.subscriptions.onCreate,
                        type: graphql_transformer_interfaces_1.SubscriptionFieldType.ON_CREATE,
                    });
                }
                if (((_d = modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.subscriptions) === null || _d === void 0 ? void 0 : _d.onUpdate) && ((_e = modelDirectiveConfig.mutations) === null || _e === void 0 ? void 0 : _e.update)) {
                    fields.add({
                        typeName: 'Subscription',
                        fieldName: modelDirectiveConfig.subscriptions.onUpdate,
                        type: graphql_transformer_interfaces_1.SubscriptionFieldType.ON_UPDATE,
                    });
                }
                if (((_f = modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.subscriptions) === null || _f === void 0 ? void 0 : _f.onDelete) && ((_g = modelDirectiveConfig.mutations) === null || _g === void 0 ? void 0 : _g.delete)) {
                    fields.add({
                        typeName: 'Subscription',
                        fieldName: modelDirectiveConfig.subscriptions.onDelete,
                        type: graphql_transformer_interfaces_1.SubscriptionFieldType.ON_DELETE,
                    });
                }
            }
            return fields;
        };
        this.getDataSourceResource = (ctx, type) => {
            return this.ddbTableMap[type.name.value];
        };
        this.getDataSourceType = () => {
            return graphql_transformer_interfaces_1.AppSyncDataSourceType.AMAZON_DYNAMODB;
        };
        this.generateCreateResolver = (ctx, type, typeName, fieldName) => {
            const dataSource = this.datasourceMap[type.name.value];
            const resolverKey = `Create${resolvers_1.generateResolverKey(typeName, fieldName)}`;
            if (!this.resolverMap[resolverKey]) {
                const resolver = ctx.resolvers.generateMutationResolver(typeName, fieldName, dataSource, graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateCreateRequestTemplate(type.name.value), `${typeName}.${fieldName}.req.vtl`), graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateDefaultResponseMappingTemplate(), `${typeName}.${fieldName}.res.vtl`));
                this.resolverMap[resolverKey] = resolver;
                resolver.addToSlot('init', graphql_transformer_core_1.MappingTemplate.s3MappingTemplateFromString(resolvers_1.generateCreateInitSlotTemplate(type.name.value, this.modelDirectiveConfig.get(type.name.value)), `${typeName}.${fieldName}.{slotName}.{slotIndex}.req.vtl`));
            }
            return this.resolverMap[resolverKey];
        };
        this.getInputs = (ctx, type, operation) => {
            const knownModels = this.typesWithModelDirective;
            let conditionInput;
            if ([graphql_transformer_interfaces_1.MutationFieldType.CREATE, graphql_transformer_interfaces_1.MutationFieldType.DELETE, graphql_transformer_interfaces_1.MutationFieldType.UPDATE].includes(operation.type)) {
                const condtionTypeName = graphql_transformer_common_1.toPascalCase(['Model', type.name.value, 'ConditionInput']);
                const filterInputs = graphql_types_1.createEnumModelFilters(ctx, type);
                conditionInput = graphql_types_1.makeMutationConditionInput(ctx, condtionTypeName, type);
                filterInputs.push(conditionInput);
                for (let input of filterInputs) {
                    const conditionInputName = input.name.value;
                    if (!ctx.output.getType(conditionInputName)) {
                        ctx.output.addInput(input);
                    }
                }
            }
            switch (operation.type) {
                case graphql_transformer_interfaces_1.QueryFieldType.GET:
                    return [graphql_transformer_common_1.makeInputValueDefinition('id', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType('ID')))];
                case graphql_transformer_interfaces_1.QueryFieldType.LIST:
                    const filterInputName = graphql_transformer_common_1.toPascalCase(['Model', type.name.value, 'FilterInput']);
                    const filterInputs = graphql_types_1.makeListQueryFilterInput(ctx, filterInputName, type);
                    for (let input of [filterInputs]) {
                        const conditionInputName = input.name.value;
                        if (!ctx.output.getType(conditionInputName)) {
                            ctx.output.addInput(input);
                        }
                    }
                    return [
                        graphql_transformer_common_1.makeInputValueDefinition('filter', graphql_transformer_common_1.makeNamedType(filterInputName)),
                        graphql_transformer_common_1.makeInputValueDefinition('limit', graphql_transformer_common_1.makeNamedType('Int')),
                        graphql_transformer_common_1.makeInputValueDefinition('nextToken', graphql_transformer_common_1.makeNamedType('String')),
                    ];
                case graphql_transformer_interfaces_1.QueryFieldType.SYNC:
                    return [];
                case graphql_transformer_interfaces_1.MutationFieldType.CREATE:
                    const createInputField = graphql_types_1.makeCreateInputField(type, this.modelDirectiveConfig.get(type.name.value), knownModels);
                    const createInputTypeName = createInputField.name.value;
                    if (!ctx.output.getType(createInputField.name.value)) {
                        ctx.output.addInput(createInputField);
                    }
                    return [
                        graphql_transformer_common_1.makeInputValueDefinition('input', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(createInputTypeName))),
                        graphql_transformer_common_1.makeInputValueDefinition('condition', graphql_transformer_common_1.makeNamedType(conditionInput.name.value)),
                    ];
                case graphql_transformer_interfaces_1.MutationFieldType.DELETE:
                    const deleteInputField = graphql_types_1.makeDeleteInputField(type);
                    const deleteInputTypeName = deleteInputField.name.value;
                    if (!ctx.output.getType(deleteInputField.name.value)) {
                        ctx.output.addInput(deleteInputField);
                    }
                    return [
                        graphql_transformer_common_1.makeInputValueDefinition('input', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(deleteInputTypeName))),
                        graphql_transformer_common_1.makeInputValueDefinition('condition', graphql_transformer_common_1.makeNamedType(conditionInput.name.value)),
                    ];
                case graphql_transformer_interfaces_1.MutationFieldType.UPDATE:
                    const updateInputField = graphql_types_1.makeUpdateInputField(type, this.modelDirectiveConfig.get(type.name.value), knownModels);
                    const updateInputTypeName = updateInputField.name.value;
                    if (!ctx.output.getType(updateInputField.name.value)) {
                        ctx.output.addInput(updateInputField);
                    }
                    return [
                        graphql_transformer_common_1.makeInputValueDefinition('input', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(updateInputTypeName))),
                        graphql_transformer_common_1.makeInputValueDefinition('condition', graphql_transformer_common_1.makeNamedType(conditionInput.name.value)),
                    ];
                case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_CREATE:
                case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_DELETE:
                case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_UPDATE:
                    return [];
                    break;
                default:
                    throw new Error('Unkown operation type');
            }
            return [];
        };
        this.getOutputType = (ctx, type, operation) => {
            let outputType;
            switch (operation.type) {
                case graphql_transformer_interfaces_1.MutationFieldType.CREATE:
                case graphql_transformer_interfaces_1.MutationFieldType.UPDATE:
                case graphql_transformer_interfaces_1.MutationFieldType.DELETE:
                case graphql_transformer_interfaces_1.QueryFieldType.GET:
                case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_CREATE:
                case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_DELETE:
                case graphql_transformer_interfaces_1.SubscriptionFieldType.ON_UPDATE:
                    outputType = type;
                    break;
                case graphql_transformer_interfaces_1.QueryFieldType.LIST:
                    const connectionFieldName = graphql_transformer_common_1.toPascalCase(['Model', type.name.value, 'Connection']);
                    outputType = graphql_types_1.makeListQueryModel(type, connectionFieldName);
                    break;
                default:
                    throw new Error(`${operation.type} not supported for ${type.name.value}`);
            }
            if (!ctx.output.getObject(outputType.name.value)) {
                ctx.output.addObject(outputType);
            }
            return outputType;
        };
        this.createNonModelInputs = (ctx, obj) => {
            for (let field of obj.fields || []) {
                if (!graphql_transformer_common_1.isScalar(field.type)) {
                    const def = ctx.output.getType(graphql_transformer_common_1.getBaseType(field.type));
                    if (def && def.kind == 'ObjectTypeDefinition' && !this.isModelField(def.name.value)) {
                        const name = this.getNonModelInputObjectName(def.name.value);
                        if (!ctx.output.getType(name)) {
                            const inputObj = object_definition_wrapper_1.InputObjectDefinitionWrapper.fromObject(name, def);
                            ctx.output.addInput(inputObj.serialize());
                        }
                    }
                }
            }
        };
        this.isModelField = (name) => {
            return this.typesWithModelDirective.has(name) ? true : false;
        };
        this.getNonModelInputObjectName = (name) => {
            return `${name}Input`;
        };
        this.addAutoGeneratableFields = (ctx, name) => {
            const modelDirectiveConfig = this.modelDirectiveConfig.get(name);
            const typeObj = ctx.output.getObject(name);
            if (!typeObj) {
                throw new Error(`Type ${name} is missing in outputs`);
            }
            const typeWrapper = new object_definition_wrapper_1.ObjectDefinationWrapper(typeObj);
            if (!typeWrapper.hasField('id')) {
                const idField = object_definition_wrapper_1.FieldWrapper.create('id', 'ID');
                typeWrapper.addField(idField);
            }
            if (modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.timestamps) {
                for (let [, fieldName] of Object.entries(modelDirectiveConfig === null || modelDirectiveConfig === void 0 ? void 0 : modelDirectiveConfig.timestamps))
                    if (fieldName) {
                        if (typeWrapper.hasField(fieldName)) {
                            const createdAtField = typeWrapper.getField(fieldName);
                            if (!['String', 'AWSDateTime'].includes(createdAtField.getTypeName())) {
                                console.warn(`type ${name}.${fieldName} is not of String or AWSDateTime. Autopoupulation is not supported`);
                            }
                        }
                        else {
                            const createdAtField = object_definition_wrapper_1.FieldWrapper.create(fieldName, 'AWSDateTime');
                            typeWrapper.addField(createdAtField);
                        }
                    }
            }
            ctx.output.updateObject(typeWrapper.serialize());
        };
    }
}
exports.ModelTransformer = ModelTransformer;
//# sourceMappingURL=graphql-model-transformer.js.map