"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultDeletionProtection = exports.applyRemovalPolicy = exports.engineDescription = exports.setupS3ImportExport = exports.DEFAULT_PASSWORD_EXCLUDE_CHARS = void 0;
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
/**
 * The default set of characters we exclude from generated passwords for database users.
 * It's a combination of characters that have a tendency to cause problems in shell scripts,
 * some engine-specific characters (for example, Oracle doesn't like '@' in its passwords),
 * and some that trip up other services, like DMS.
 *
 * This constant is private to the RDS module.
 */
exports.DEFAULT_PASSWORD_EXCLUDE_CHARS = " %+~`#$&*()|[]{}:;<>?!'/@\"\\";
/**
 * Validates the S3 import/export props and returns the import/export roles, if any.
 * If `combineRoles` is true, will reuse the import role for export (or vice versa) if possible.
 *
 * Notably, `combineRoles` is (by default) set to true for instances, but false for clusters.
 * This is because the `combineRoles` functionality is most applicable to instances and didn't exist
 * for the initial clusters implementation. To maintain backwards compatibility, it is set to false for clusters.
 */
function setupS3ImportExport(scope, props, combineRoles) {
    let s3ImportRole = props.s3ImportRole;
    let s3ExportRole = props.s3ExportRole;
    if (props.s3ImportBuckets && props.s3ImportBuckets.length > 0) {
        if (props.s3ImportRole) {
            throw new Error('Only one of s3ImportRole or s3ImportBuckets must be specified, not both.');
        }
        s3ImportRole = (combineRoles && s3ExportRole) ? s3ExportRole : new iam.Role(scope, 'S3ImportRole', {
            assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),
        });
        for (const bucket of props.s3ImportBuckets) {
            bucket.grantRead(s3ImportRole);
        }
    }
    if (props.s3ExportBuckets && props.s3ExportBuckets.length > 0) {
        if (props.s3ExportRole) {
            throw new Error('Only one of s3ExportRole or s3ExportBuckets must be specified, not both.');
        }
        s3ExportRole = (combineRoles && s3ImportRole) ? s3ImportRole : new iam.Role(scope, 'S3ExportRole', {
            assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),
        });
        for (const bucket of props.s3ExportBuckets) {
            bucket.grantReadWrite(s3ExportRole);
        }
    }
    return { s3ImportRole, s3ExportRole };
}
exports.setupS3ImportExport = setupS3ImportExport;
function engineDescription(engine) {
    var _a;
    return engine.engineType + (((_a = engine.engineVersion) === null || _a === void 0 ? void 0 : _a.fullVersion) ? `-${engine.engineVersion.fullVersion}` : '');
}
exports.engineDescription = engineDescription;
function applyRemovalPolicy(cfnDatabase, removalPolicy) {
    if (!removalPolicy) {
        // the default DeletionPolicy is 'Snapshot', which is fine,
        // but we should also make it 'Snapshot' for UpdateReplace policy
        cfnDatabase.cfnOptions.updateReplacePolicy = core_1.CfnDeletionPolicy.SNAPSHOT;
    }
    else {
        // just apply whatever removal policy the customer explicitly provided
        cfnDatabase.applyRemovalPolicy(removalPolicy);
    }
}
exports.applyRemovalPolicy = applyRemovalPolicy;
/**
 * By default, deletion protection is disabled.
 * Enable if explicitly provided or if the RemovalPolicy has been set to RETAIN
 */
function defaultDeletionProtection(deletionProtection, removalPolicy) {
    return deletionProtection !== undefined
        ? deletionProtection
        : (removalPolicy === core_1.RemovalPolicy.RETAIN ? true : undefined);
}
exports.defaultDeletionProtection = defaultDeletionProtection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQXdDO0FBRXhDLHdDQUF5RjtBQUd6Rjs7Ozs7OztHQU9HO0FBQ1UsUUFBQSw4QkFBOEIsR0FBRywrQkFBK0IsQ0FBQztBQVU5RTs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsbUJBQW1CLENBQ2pDLEtBQWdCLEVBQ2hCLEtBQWtDLEVBQ2xDLFlBQXNCO0lBRXRCLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7SUFDdEMsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztJQUV0QyxJQUFJLEtBQUssQ0FBQyxlQUFlLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdELElBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDBFQUEwRSxDQUFDLENBQUM7U0FDN0Y7UUFFRCxZQUFZLEdBQUcsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDakcsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1NBQ3pELENBQUMsQ0FBQztRQUNILEtBQUssTUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRTtZQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2hDO0tBQ0Y7SUFFRCxJQUFJLEtBQUssQ0FBQyxlQUFlLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdELElBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDBFQUEwRSxDQUFDLENBQUM7U0FDN0Y7UUFFRCxZQUFZLEdBQUcsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDakcsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1NBQ3pELENBQUMsQ0FBQztRQUNILEtBQUssTUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRTtZQUMxQyxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3JDO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxDQUFDO0FBQ3hDLENBQUM7QUFuQ0Qsa0RBbUNDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsTUFBZTs7SUFDL0MsT0FBTyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsT0FBQSxNQUFNLENBQUMsYUFBYSwwQ0FBRSxXQUFXLEVBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDL0csQ0FBQztBQUZELDhDQUVDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsV0FBd0IsRUFBRSxhQUE2QjtJQUN4RixJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLDJEQUEyRDtRQUMzRCxpRUFBaUU7UUFDakUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsR0FBRyx3QkFBaUIsQ0FBQyxRQUFRLENBQUM7S0FDekU7U0FBTTtRQUNMLHNFQUFzRTtRQUN0RSxXQUFXLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDL0M7QUFDSCxDQUFDO0FBVEQsZ0RBU0M7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQix5QkFBeUIsQ0FBQyxrQkFBNEIsRUFBRSxhQUE2QjtJQUNuRyxPQUFPLGtCQUFrQixLQUFLLFNBQVM7UUFDckMsQ0FBQyxDQUFDLGtCQUFrQjtRQUNwQixDQUFDLENBQUMsQ0FBQyxhQUFhLEtBQUssb0JBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUpELDhEQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaWFtIGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzJztcbmltcG9ydCB7IENvbnN0cnVjdCwgQ2ZuRGVsZXRpb25Qb2xpY3ksIENmblJlc291cmNlLCBSZW1vdmFsUG9saWN5IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJRW5naW5lIH0gZnJvbSAnLi4vZW5naW5lJztcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBzZXQgb2YgY2hhcmFjdGVycyB3ZSBleGNsdWRlIGZyb20gZ2VuZXJhdGVkIHBhc3N3b3JkcyBmb3IgZGF0YWJhc2UgdXNlcnMuXG4gKiBJdCdzIGEgY29tYmluYXRpb24gb2YgY2hhcmFjdGVycyB0aGF0IGhhdmUgYSB0ZW5kZW5jeSB0byBjYXVzZSBwcm9ibGVtcyBpbiBzaGVsbCBzY3JpcHRzLFxuICogc29tZSBlbmdpbmUtc3BlY2lmaWMgY2hhcmFjdGVycyAoZm9yIGV4YW1wbGUsIE9yYWNsZSBkb2Vzbid0IGxpa2UgJ0AnIGluIGl0cyBwYXNzd29yZHMpLFxuICogYW5kIHNvbWUgdGhhdCB0cmlwIHVwIG90aGVyIHNlcnZpY2VzLCBsaWtlIERNUy5cbiAqXG4gKiBUaGlzIGNvbnN0YW50IGlzIHByaXZhdGUgdG8gdGhlIFJEUyBtb2R1bGUuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BBU1NXT1JEX0VYQ0xVREVfQ0hBUlMgPSBcIiAlK35gIyQmKigpfFtde306Ozw+PyEnL0BcXFwiXFxcXFwiO1xuXG4vKiogQ29tbW9uIGJhc2Ugb2YgYERhdGFiYXNlSW5zdGFuY2VQcm9wc2AgYW5kIGBEYXRhYmFzZUNsdXN0ZXJCYXNlUHJvcHNgIHRoYXQgaGFzIG9ubHkgdGhlIFMzIHByb3BzICovXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlUzNJbXBvcnRFeHBvcnRQcm9wcyB7XG4gIHJlYWRvbmx5IHMzSW1wb3J0Um9sZT86IGlhbS5JUm9sZTtcbiAgcmVhZG9ubHkgczNJbXBvcnRCdWNrZXRzPzogczMuSUJ1Y2tldFtdO1xuICByZWFkb25seSBzM0V4cG9ydFJvbGU/OiBpYW0uSVJvbGU7XG4gIHJlYWRvbmx5IHMzRXhwb3J0QnVja2V0cz86IHMzLklCdWNrZXRbXTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIFMzIGltcG9ydC9leHBvcnQgcHJvcHMgYW5kIHJldHVybnMgdGhlIGltcG9ydC9leHBvcnQgcm9sZXMsIGlmIGFueS5cbiAqIElmIGBjb21iaW5lUm9sZXNgIGlzIHRydWUsIHdpbGwgcmV1c2UgdGhlIGltcG9ydCByb2xlIGZvciBleHBvcnQgKG9yIHZpY2UgdmVyc2EpIGlmIHBvc3NpYmxlLlxuICpcbiAqIE5vdGFibHksIGBjb21iaW5lUm9sZXNgIGlzIChieSBkZWZhdWx0KSBzZXQgdG8gdHJ1ZSBmb3IgaW5zdGFuY2VzLCBidXQgZmFsc2UgZm9yIGNsdXN0ZXJzLlxuICogVGhpcyBpcyBiZWNhdXNlIHRoZSBgY29tYmluZVJvbGVzYCBmdW5jdGlvbmFsaXR5IGlzIG1vc3QgYXBwbGljYWJsZSB0byBpbnN0YW5jZXMgYW5kIGRpZG4ndCBleGlzdFxuICogZm9yIHRoZSBpbml0aWFsIGNsdXN0ZXJzIGltcGxlbWVudGF0aW9uLiBUbyBtYWludGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgaXQgaXMgc2V0IHRvIGZhbHNlIGZvciBjbHVzdGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwUzNJbXBvcnRFeHBvcnQoXG4gIHNjb3BlOiBDb25zdHJ1Y3QsXG4gIHByb3BzOiBEYXRhYmFzZVMzSW1wb3J0RXhwb3J0UHJvcHMsXG4gIGNvbWJpbmVSb2xlcz86IGJvb2xlYW4pOiB7IHMzSW1wb3J0Um9sZT86IGlhbS5JUm9sZSwgczNFeHBvcnRSb2xlPzogaWFtLklSb2xlIH0ge1xuXG4gIGxldCBzM0ltcG9ydFJvbGUgPSBwcm9wcy5zM0ltcG9ydFJvbGU7XG4gIGxldCBzM0V4cG9ydFJvbGUgPSBwcm9wcy5zM0V4cG9ydFJvbGU7XG5cbiAgaWYgKHByb3BzLnMzSW1wb3J0QnVja2V0cyAmJiBwcm9wcy5zM0ltcG9ydEJ1Y2tldHMubGVuZ3RoID4gMCkge1xuICAgIGlmIChwcm9wcy5zM0ltcG9ydFJvbGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgb2YgczNJbXBvcnRSb2xlIG9yIHMzSW1wb3J0QnVja2V0cyBtdXN0IGJlIHNwZWNpZmllZCwgbm90IGJvdGguJyk7XG4gICAgfVxuXG4gICAgczNJbXBvcnRSb2xlID0gKGNvbWJpbmVSb2xlcyAmJiBzM0V4cG9ydFJvbGUpID8gczNFeHBvcnRSb2xlIDogbmV3IGlhbS5Sb2xlKHNjb3BlLCAnUzNJbXBvcnRSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ3Jkcy5hbWF6b25hd3MuY29tJyksXG4gICAgfSk7XG4gICAgZm9yIChjb25zdCBidWNrZXQgb2YgcHJvcHMuczNJbXBvcnRCdWNrZXRzKSB7XG4gICAgICBidWNrZXQuZ3JhbnRSZWFkKHMzSW1wb3J0Um9sZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3BzLnMzRXhwb3J0QnVja2V0cyAmJiBwcm9wcy5zM0V4cG9ydEJ1Y2tldHMubGVuZ3RoID4gMCkge1xuICAgIGlmIChwcm9wcy5zM0V4cG9ydFJvbGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgb2YgczNFeHBvcnRSb2xlIG9yIHMzRXhwb3J0QnVja2V0cyBtdXN0IGJlIHNwZWNpZmllZCwgbm90IGJvdGguJyk7XG4gICAgfVxuXG4gICAgczNFeHBvcnRSb2xlID0gKGNvbWJpbmVSb2xlcyAmJiBzM0ltcG9ydFJvbGUpID8gczNJbXBvcnRSb2xlIDogbmV3IGlhbS5Sb2xlKHNjb3BlLCAnUzNFeHBvcnRSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ3Jkcy5hbWF6b25hd3MuY29tJyksXG4gICAgfSk7XG4gICAgZm9yIChjb25zdCBidWNrZXQgb2YgcHJvcHMuczNFeHBvcnRCdWNrZXRzKSB7XG4gICAgICBidWNrZXQuZ3JhbnRSZWFkV3JpdGUoczNFeHBvcnRSb2xlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBzM0ltcG9ydFJvbGUsIHMzRXhwb3J0Um9sZSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5naW5lRGVzY3JpcHRpb24oZW5naW5lOiBJRW5naW5lKSB7XG4gIHJldHVybiBlbmdpbmUuZW5naW5lVHlwZSArIChlbmdpbmUuZW5naW5lVmVyc2lvbj8uZnVsbFZlcnNpb24gPyBgLSR7ZW5naW5lLmVuZ2luZVZlcnNpb24uZnVsbFZlcnNpb259YCA6ICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVtb3ZhbFBvbGljeShjZm5EYXRhYmFzZTogQ2ZuUmVzb3VyY2UsIHJlbW92YWxQb2xpY3k/OiBSZW1vdmFsUG9saWN5KTogdm9pZCB7XG4gIGlmICghcmVtb3ZhbFBvbGljeSkge1xuICAgIC8vIHRoZSBkZWZhdWx0IERlbGV0aW9uUG9saWN5IGlzICdTbmFwc2hvdCcsIHdoaWNoIGlzIGZpbmUsXG4gICAgLy8gYnV0IHdlIHNob3VsZCBhbHNvIG1ha2UgaXQgJ1NuYXBzaG90JyBmb3IgVXBkYXRlUmVwbGFjZSBwb2xpY3lcbiAgICBjZm5EYXRhYmFzZS5jZm5PcHRpb25zLnVwZGF0ZVJlcGxhY2VQb2xpY3kgPSBDZm5EZWxldGlvblBvbGljeS5TTkFQU0hPVDtcbiAgfSBlbHNlIHtcbiAgICAvLyBqdXN0IGFwcGx5IHdoYXRldmVyIHJlbW92YWwgcG9saWN5IHRoZSBjdXN0b21lciBleHBsaWNpdGx5IHByb3ZpZGVkXG4gICAgY2ZuRGF0YWJhc2UuYXBwbHlSZW1vdmFsUG9saWN5KHJlbW92YWxQb2xpY3kpO1xuICB9XG59XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgZGVsZXRpb24gcHJvdGVjdGlvbiBpcyBkaXNhYmxlZC5cbiAqIEVuYWJsZSBpZiBleHBsaWNpdGx5IHByb3ZpZGVkIG9yIGlmIHRoZSBSZW1vdmFsUG9saWN5IGhhcyBiZWVuIHNldCB0byBSRVRBSU5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHREZWxldGlvblByb3RlY3Rpb24oZGVsZXRpb25Qcm90ZWN0aW9uPzogYm9vbGVhbiwgcmVtb3ZhbFBvbGljeT86IFJlbW92YWxQb2xpY3kpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIGRlbGV0aW9uUHJvdGVjdGlvbiAhPT0gdW5kZWZpbmVkXG4gICAgPyBkZWxldGlvblByb3RlY3Rpb25cbiAgICA6IChyZW1vdmFsUG9saWN5ID09PSBSZW1vdmFsUG9saWN5LlJFVEFJTiA/IHRydWUgOiB1bmRlZmluZWQpO1xufVxuIl19