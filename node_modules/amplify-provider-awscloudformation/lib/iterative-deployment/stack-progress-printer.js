"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackProgressPrinter = void 0;
const columnify_1 = __importDefault(require("columnify"));
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const CFN_SUCCESS_STATUS = ['UPDATE_COMPLETE', 'CREATE_COMPLETE', 'DELETE_COMPLETE', 'DELETE_SKIPPED'];
const CNF_ERROR_STATUS = ['CREATE_FAILED', 'DELETE_FAILED', 'UPDATE_FAILED'];
class StackProgressPrinter {
    constructor() {
        this.events = [];
        this.isRunning = true;
        this.spinner = ora_1.default('Deploying');
        this.addActivity = (event) => {
            this.events.push(event);
        };
        this.print = () => {
            this.events = this.events.reverse();
            if (this.events.length > 0 && this.isRunning) {
                console.log('\n');
                const COLUMNS = ['ResourceStatus', 'LogicalResourceId', 'ResourceType', 'Timestamp', 'ResourceStatusReason'];
                const e = this.events.map(ev => {
                    const res = {};
                    const { ResourceStatus: resourceStatus } = ev;
                    let colorFn = chalk_1.default.reset;
                    if (CNF_ERROR_STATUS.includes(resourceStatus)) {
                        colorFn = chalk_1.default.red;
                    }
                    else if (CFN_SUCCESS_STATUS.includes(resourceStatus)) {
                        colorFn = chalk_1.default.green;
                    }
                    Object.entries(ev)
                        .filter(([name, value]) => COLUMNS.includes(name))
                        .forEach(([name, value]) => {
                        res[name] = colorFn(value);
                    });
                    return res;
                });
                console.log(columnify_1.default(e, {
                    columns: COLUMNS,
                    showHeaders: false,
                }));
                this.events = [];
            }
        };
        this.start = () => {
            this.isRunning = true;
        };
        this.stop = () => {
            this.spinner.stop();
        };
    }
}
exports.StackProgressPrinter = StackProgressPrinter;
//# sourceMappingURL=stack-progress-printer.js.map