"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminLoginFlow = void 0;
const ora_1 = __importDefault(require("ora"));
const amplify_cli_core_1 = require("amplify-cli-core");
const admin_helpers_1 = require("./utils/admin-helpers");
const admin_login_server_1 = require("./utils/admin-login-server");
async function adminLoginFlow(context, appId, envName, region) {
    envName = envName || context.amplify.getEnvInfo().envName;
    if (!region) {
        const { isAdminApp, region: _region } = await admin_helpers_1.isAmplifyAdminApp(appId);
        if (!isAdminApp) {
            throw new Error(`Admin UI not enabled for appId: ${appId}`);
        }
        region = _region;
    }
    const url = admin_helpers_1.adminVerifyUrl(appId, envName, region);
    context.print.info(`Opening link: ${url}`);
    await amplify_cli_core_1.open(url, { wait: false }).catch(e => {
        context.print.error(`Failed to open web browser: ${e.message || e}`);
        return;
    });
    const spinner = ora_1.default('Continue in browser to log inâ€¦\n').start();
    try {
        const originUrl = admin_helpers_1.adminBackendMap[region].amplifyAdminUrl;
        const adminLoginServer = new admin_login_server_1.AdminLoginServer(appId, originUrl, context.print);
        await new Promise(resolve => adminLoginServer.startServer(() => {
            adminLoginServer.shutdown();
            spinner.succeed('Successfully received Amplify Admin tokens.');
            resolve();
        }));
    }
    catch (e) {
        spinner.stop();
        context.print.error(`Failed to authenticate with Amplify Admin: ${e.message || e}`);
    }
}
exports.adminLoginFlow = adminLoginFlow;
//# sourceMappingURL=admin-login.js.map