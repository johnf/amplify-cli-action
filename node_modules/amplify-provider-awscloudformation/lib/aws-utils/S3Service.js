"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Service = exports.createS3Service = void 0;
const s3_1 = __importDefault(require("aws-sdk/clients/s3"));
const configuration_manager_1 = require("../configuration-manager");
const createS3Service = async (context, options) => {
    let credentials = {};
    try {
        credentials = await configuration_manager_1.loadConfiguration(context);
    }
    catch (e) {
    }
    const s3 = new s3_1.default({ ...credentials, ...options });
    return new S3Service(s3);
};
exports.createS3Service = createS3Service;
class S3Service {
    constructor(s3) {
        this.s3 = s3;
        this.cachedBucketList = [];
    }
    async listBuckets() {
        if (this.cachedBucketList.length === 0) {
            const response = await this.s3.listBuckets().promise();
            if (response.Buckets) {
                this.cachedBucketList.push(...response.Buckets);
            }
        }
        return this.cachedBucketList;
    }
    async bucketExists(bucketName) {
        const response = await this.s3
            .headBucket({
            Bucket: bucketName,
        })
            .promise();
        return Object.keys(response).length === 0;
    }
    async getBucketLocation(bucketName) {
        const response = await this.s3
            .getBucketLocation({
            Bucket: bucketName,
        })
            .promise();
        if (response.LocationConstraint === '' || response.LocationConstraint === null) {
            return 'us-east-1';
        }
        return response.LocationConstraint;
    }
}
exports.S3Service = S3Service;
//# sourceMappingURL=S3Service.js.map