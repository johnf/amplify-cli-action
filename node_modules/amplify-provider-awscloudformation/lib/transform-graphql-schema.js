"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDirectiveDefinitions = exports.transformGraphQLSchema = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = __importDefault(require("inquirer"));
const import_global_1 = __importDefault(require("import-global"));
const import_from_1 = __importDefault(require("import-from"));
const graphql_dynamodb_transformer_1 = require("graphql-dynamodb-transformer");
const graphql_auth_transformer_1 = require("graphql-auth-transformer");
const graphql_connection_transformer_1 = require("graphql-connection-transformer");
const graphql_elasticsearch_transformer_1 = require("graphql-elasticsearch-transformer");
const graphql_versioned_transformer_1 = require("graphql-versioned-transformer");
const graphql_function_transformer_1 = require("graphql-function-transformer");
const graphql_http_transformer_1 = require("graphql-http-transformer");
const graphql_predictions_transformer_1 = require("graphql-predictions-transformer");
const graphql_key_transformer_1 = require("graphql-key-transformer");
const constants_1 = require("./constants");
const amplify_cli_feature_flag_adapter_1 = require("./utils/amplify-cli-feature-flag-adapter");
const admin_helpers_1 = require("./utils/admin-helpers");
const amplify_cli_core_1 = require("amplify-cli-core");
const graphql_transformer_core_1 = require("graphql-transformer-core");
const graphql_1 = require("graphql");
const upload_appsync_files_1 = require("./upload-appsync-files");
const amplify_cli_core_2 = require("amplify-cli-core");
const transform_graphql_schema_1 = require("./graphql-transformer/transform-graphql-schema");
const apiCategory = 'api';
const storageCategory = 'storage';
const parametersFileName = 'parameters.json';
const schemaFileName = 'schema.graphql';
const schemaDirName = 'schema';
const ROOT_APPSYNC_S3_KEY = 'amplify-appsync-files';
const s3ServiceName = 'S3';
function warnOnAuth(context, map) {
    const unAuthModelTypes = Object.keys(map).filter(type => !map[type].includes('auth') && map[type].includes('model'));
    if (unAuthModelTypes.length) {
        context.print.warning("\nThe following types do not have '@auth' enabled. Consider using @auth with @model");
        context.print.warning(unAuthModelTypes.map(type => `\t - ${type}`).join('\n'));
        context.print.info('Learn more about @auth here: https://docs.amplify.aws/cli/graphql-transformer/auth\n');
    }
}
function getTransformerFactory(context, resourceDir, authConfig) {
    return async (addSearchableTransformer, storageConfig) => {
        var _a, _b;
        const transformerList = [
            new graphql_dynamodb_transformer_1.DynamoDBModelTransformer(),
            new graphql_versioned_transformer_1.VersionedModelTransformer(),
            new graphql_function_transformer_1.FunctionTransformer(),
            new graphql_http_transformer_1.HttpTransformer(),
            new graphql_key_transformer_1.KeyTransformer(),
            new graphql_connection_transformer_1.ModelConnectionTransformer(),
            new graphql_predictions_transformer_1.PredictionsTransformer(storageConfig),
        ];
        if (addSearchableTransformer) {
            transformerList.push(new graphql_elasticsearch_transformer_1.SearchableModelTransformer());
        }
        const customTransformersConfig = await graphql_transformer_core_1.readTransformerConfiguration(resourceDir);
        const customTransformers = (customTransformersConfig && customTransformersConfig.transformers
            ? customTransformersConfig.transformers
            : [])
            .map(transformer => {
            const fileUrlMatch = /^file:\/\/(.*)\s*$/m.exec(transformer);
            const modulePath = fileUrlMatch ? fileUrlMatch[1] : transformer;
            if (!modulePath) {
                throw new Error(`Invalid value specified for transformer: '${transformer}'`);
            }
            let importedModule;
            const tempModulePath = modulePath.toString();
            try {
                if (path_1.default.isAbsolute(tempModulePath)) {
                    importedModule = require(modulePath);
                }
                else {
                    const projectRootPath = context.amplify.pathManager.searchProjectRootPath();
                    const projectNodeModules = path_1.default.join(projectRootPath, 'node_modules');
                    try {
                        importedModule = import_from_1.default(projectNodeModules, modulePath);
                    }
                    catch (_) {
                    }
                    if (!importedModule) {
                        importedModule = import_global_1.default(modulePath);
                    }
                }
                return importedModule;
            }
            catch (error) {
                context.print.error(`Unable to import custom transformer module(${modulePath}).`);
                context.print.error(`You may fix this error by editing transformers at ${path_1.default.join(resourceDir, graphql_transformer_core_1.TRANSFORM_CONFIG_FILE_NAME)}`);
                throw error;
            }
        })
            .map(imported => {
            const CustomTransformer = imported.default;
            if (typeof CustomTransformer === 'function') {
                return new CustomTransformer();
            }
            else if (typeof CustomTransformer === 'object') {
                return CustomTransformer;
            }
            throw new Error("Custom Transformers' default export must be a function or an object");
        })
            .filter(customTransformer => customTransformer);
        if (customTransformers.length > 0) {
            transformerList.push(...customTransformers);
        }
        let amplifyAdminEnabled = false;
        try {
            const amplifyMeta = amplify_cli_core_1.stateManager.getMeta();
            const appId = (_b = (_a = amplifyMeta === null || amplifyMeta === void 0 ? void 0 : amplifyMeta.providers) === null || _a === void 0 ? void 0 : _a[constants_1.ProviderName]) === null || _b === void 0 ? void 0 : _b.AmplifyAppId;
            const res = await admin_helpers_1.isAmplifyAdminApp(appId);
            amplifyAdminEnabled = res.isAdminApp;
        }
        catch (err) {
            console.info('App not deployed yet.');
        }
        transformerList.push(new graphql_auth_transformer_1.ModelAuthTransformer({ authConfig, addAwsIamAuthInOutputSchema: amplifyAdminEnabled }));
        return transformerList;
    };
}
async function transformerVersionCheck(context, resourceDir, cloudBackendDirectory, updatedResources, usedDirectives) {
    const versionChangeMessage = 'The default behavior for @auth has changed in the latest version of Amplify\nRead here for details: https://docs.amplify.aws/cli/graphql-transformer/auth#authorizing-subscriptions';
    const warningESMessage = 'The behavior for @searchable has changed after version 4.14.1.\nRead here for details: https://docs.amplify.aws/cli/graphql-transformer/searchable';
    const checkVersionExist = config => config && config.Version;
    const checkESWarningExists = config => config && config.ElasticsearchWarning;
    let writeToConfig = false;
    const cloudTransformerConfig = await graphql_transformer_core_1.readTransformerConfiguration(cloudBackendDirectory);
    const cloudVersionExist = checkVersionExist(cloudTransformerConfig);
    const cloudWarningExist = checkESWarningExists(cloudTransformerConfig);
    const localTransformerConfig = await graphql_transformer_core_1.readTransformerConfiguration(resourceDir);
    const localVersionExist = checkVersionExist(localTransformerConfig);
    const localWarningExist = checkESWarningExists(localTransformerConfig);
    const showPrompt = !(cloudVersionExist || localVersionExist);
    const showWarning = !(cloudWarningExist || localWarningExist);
    const resources = updatedResources.filter(resource => resource.service === 'AppSync');
    if (resources.length > 0) {
        if (showPrompt && usedDirectives.includes('auth')) {
            await warningMessage(context, versionChangeMessage);
        }
        if (showWarning && usedDirectives.includes('searchable')) {
            await warningMessage(context, warningESMessage);
        }
    }
    if (!localTransformerConfig.Version) {
        localTransformerConfig.Version = graphql_transformer_core_1.TRANSFORM_BASE_VERSION;
        writeToConfig = true;
    }
    if (!localTransformerConfig.warningESMessage) {
        localTransformerConfig.ElasticsearchWarning = true;
        writeToConfig = true;
    }
    if (writeToConfig) {
        await graphql_transformer_core_1.writeTransformerConfiguration(resourceDir, localTransformerConfig);
    }
}
async function warningMessage(context, warningMessage) {
    if (context.exeInfo && context.exeInfo.inputParams && context.exeInfo.inputParams.yes) {
        context.print.warning(`\n${warningMessage}\n`);
    }
    else {
        context.print.warning(`\n${warningMessage}\n`);
        const response = await inquirer_1.default.prompt({
            name: 'transformerConfig',
            type: 'confirm',
            message: `Do you wish to continue?`,
            default: false,
        });
        if (!response.transformerConfig) {
            await context.usageData.emitSuccess();
            amplify_cli_core_2.exitOnNextTick(0);
        }
    }
}
function apiProjectIsFromOldVersion(pathToProject, resourcesToBeCreated) {
    const resources = resourcesToBeCreated.filter(resource => resource.service === 'AppSync');
    if (!pathToProject || resources.length > 0) {
        return false;
    }
    return fs_extra_1.default.existsSync(`${pathToProject}/${graphql_transformer_core_1.CLOUDFORMATION_FILE_NAME}`) && !fs_extra_1.default.existsSync(`${pathToProject}/${graphql_transformer_core_1.TRANSFORM_CONFIG_FILE_NAME}`);
}
async function migrateProject(context, options) {
    const { resourceDir, isCLIMigration, cloudBackendDirectory } = options;
    const updateAndWaitForStack = options.handleMigration || (() => Promise.resolve('Skipping update'));
    let oldProjectConfig;
    let oldCloudBackend;
    try {
        context.print.info('\nMigrating your API. This may take a few minutes.');
        const { project, cloudBackend } = await graphql_transformer_core_1.migrateAPIProject({
            projectDirectory: resourceDir,
            cloudBackendDirectory,
        });
        oldProjectConfig = project;
        oldCloudBackend = cloudBackend;
        await updateAndWaitForStack({ isCLIMigration });
    }
    catch (e) {
        await graphql_transformer_core_1.revertAPIMigration(resourceDir, oldProjectConfig);
        throw e;
    }
    try {
        options.cloudBackendDirectory = resourceDir;
        await transformGraphQLSchema(context, options);
        const result = await updateAndWaitForStack({ isCLIMigration });
        context.print.info('\nFinished migrating API.');
        return result;
    }
    catch (e) {
        context.print.error('Reverting API migration.');
        await graphql_transformer_core_1.revertAPIMigration(resourceDir, oldCloudBackend);
        try {
            await updateAndWaitForStack({ isReverting: true, isCLIMigration });
        }
        catch (e) {
            context.print.error('Error reverting intermediate migration stack.');
        }
        await graphql_transformer_core_1.revertAPIMigration(resourceDir, oldProjectConfig);
        context.print.error('API successfully reverted.');
        throw e;
    }
}
async function transformGraphQLSchema(context, options) {
    const useExperimentalPipelineTransformer = amplify_cli_core_2.FeatureFlags.getBoolean('graphQLTransformer.useExperimentalPipelinedTransformer');
    if (useExperimentalPipelineTransformer) {
        return transform_graphql_schema_1.transformGraphQLSchema(context, options);
    }
    const backEndDir = context.amplify.pathManager.getBackendDirPath();
    const flags = context.parameters.options;
    if (flags['no-gql-override']) {
        return;
    }
    let { resourceDir, parameters } = options;
    const { forceCompile } = options;
    const { resourcesToBeCreated, resourcesToBeUpdated, allResources } = await context.amplify.getResourceStatus(apiCategory);
    let resources = resourcesToBeCreated.concat(resourcesToBeUpdated);
    const resourceNeedCompile = allResources
        .filter(r => !resources.includes(r))
        .filter(r => {
        const buildDir = path_1.default.normalize(path_1.default.join(backEndDir, apiCategory, r.resourceName, 'build'));
        return !fs_extra_1.default.existsSync(buildDir);
    });
    resources = resources.concat(resourceNeedCompile);
    if (forceCompile) {
        resources = resources.concat(allResources);
    }
    resources = resources.filter(resource => resource.service === 'AppSync');
    const isNewAppSyncAPI = resourcesToBeCreated.filter(resource => resource.service === 'AppSync').length === 0 ? false : true;
    if (!resourceDir) {
        if (resources.length > 0) {
            const resource = resources[0];
            if (resource.providerPlugin !== constants_1.ProviderName) {
                return;
            }
            const { category, resourceName } = resource;
            resourceDir = path_1.default.normalize(path_1.default.join(backEndDir, category, resourceName));
        }
        else {
            return;
        }
    }
    let previouslyDeployedBackendDir = options.cloudBackendDirectory;
    if (!previouslyDeployedBackendDir) {
        if (resources.length > 0) {
            const resource = resources[0];
            if (resource.providerPlugin !== constants_1.ProviderName) {
                return;
            }
            const { category, resourceName } = resource;
            const cloudBackendRootDir = context.amplify.pathManager.getCurrentCloudBackendDirPath();
            previouslyDeployedBackendDir = path_1.default.normalize(path_1.default.join(cloudBackendRootDir, category, resourceName));
        }
    }
    const parametersFilePath = path_1.default.join(resourceDir, parametersFileName);
    if (!parameters && fs_extra_1.default.existsSync(parametersFilePath)) {
        try {
            parameters = context.amplify.readJsonFile(parametersFilePath);
        }
        catch (e) {
            parameters = {};
        }
    }
    const isCLIMigration = options.migrate;
    const isOldApiVersion = apiProjectIsFromOldVersion(previouslyDeployedBackendDir, resourcesToBeCreated);
    const migrateOptions = {
        ...options,
        resourceDir,
        migrate: false,
        isCLIMigration,
        cloudBackendDirectory: previouslyDeployedBackendDir,
    };
    if (isCLIMigration && isOldApiVersion) {
        return await migrateProject(context, migrateOptions);
    }
    else if (isOldApiVersion) {
        let IsOldApiProject;
        if (context.exeInfo && context.exeInfo.inputParams && context.exeInfo.inputParams.yes) {
            IsOldApiProject = context.exeInfo.inputParams.yes;
        }
        else {
            const migrateMessage = `${chalk_1.default.bold('The CLI is going to take the following actions during the migration step:')}\n` +
                '\n1. If you have a GraphQL API, we will update the corresponding Cloudformation stack to support larger annotated schemas and custom resolvers.\n' +
                'In this process, we will be making Cloudformation API calls to update your GraphQL API Cloudformation stack. This operation will result in deletion of your AppSync resolvers and then the creation of new ones and for a brief while your AppSync API will be unavailable until the migration finishes\n' +
                '\n2. We will be updating your local Cloudformation files present inside the ‘amplify/‘ directory of your app project, for the GraphQL API service\n' +
                '\n3. If for any reason the migration fails, the CLI will rollback your cloud and local changes and you can take a look at https://aws-amplify.github.io/docs/cli/migrate?sdk=js for manually migrating your project so that it’s compatible with the latest version of the CLI\n' +
                '\n4. ALL THE ABOVE MENTIONED OPERATIONS WILL NOT DELETE ANY DATA FROM ANY OF YOUR DATA STORES\n' +
                `\n${chalk_1.default.bold('Before the migration, please be aware of the following things:')}\n` +
                '\n1. Make sure to have an internet connection through the migration process\n' +
                '\n2. Make sure to not exit/terminate the migration process (by interrupting it explicitly in the middle of migration), as this will lead to inconsistency within your project\n' +
                '\n3. Make sure to take a backup of your entire project (including the amplify related config files)\n' +
                '\nDo you want to continue?\n';
            ({ IsOldApiProject } = await inquirer_1.default.prompt({
                name: 'IsOldApiProject',
                type: 'confirm',
                message: migrateMessage,
                default: true,
            }));
        }
        if (!IsOldApiProject) {
            throw new Error('Migration cancelled. Please downgrade to a older version of the Amplify CLI or migrate your API project.');
        }
        return await migrateProject(context, migrateOptions);
    }
    let { authConfig } = options;
    if (!authConfig) {
        if (resources[0].output.securityType) {
            authConfig = {
                defaultAuthentication: {
                    authenticationType: resources[0].output.securityType,
                },
                additionalAuthenticationProviders: [],
            };
        }
        else {
            ({ authConfig } = resources[0].output);
        }
    }
    const s3Resource = s3ResourceAlreadyExists(context);
    const storageConfig = s3Resource ? getBucketName(context, s3Resource, backEndDir) : undefined;
    const buildDir = path_1.default.normalize(path_1.default.join(resourceDir, 'build'));
    const schemaFilePath = path_1.default.normalize(path_1.default.join(resourceDir, schemaFileName));
    const schemaDirPath = path_1.default.normalize(path_1.default.join(resourceDir, schemaDirName));
    let deploymentRootKey = await getPreviousDeploymentRootKey(previouslyDeployedBackendDir);
    if (!deploymentRootKey) {
        const deploymentSubKey = await upload_appsync_files_1.hashDirectory(resourceDir);
        deploymentRootKey = `${ROOT_APPSYNC_S3_KEY}/${deploymentSubKey}`;
    }
    const projectBucket = options.dryRun ? 'fake-bucket' : getProjectBucket(context);
    const buildParameters = {
        ...parameters,
        S3DeploymentBucket: projectBucket,
        S3DeploymentRootKey: deploymentRootKey,
    };
    if (!options.dryRun) {
        fs_extra_1.default.ensureDirSync(buildDir);
    }
    const project = await graphql_transformer_core_1.readProjectConfiguration(resourceDir);
    const directiveMap = graphql_transformer_core_1.collectDirectivesByTypeNames(project.schema);
    warnOnAuth(context, directiveMap.types);
    await transformerVersionCheck(context, resourceDir, previouslyDeployedBackendDir, resourcesToBeUpdated, directiveMap.directives);
    const transformerListFactory = getTransformerFactory(context, resourceDir, authConfig);
    let searchableTransformerFlag = false;
    if (directiveMap.directives.includes('searchable')) {
        searchableTransformerFlag = true;
    }
    const ff = new amplify_cli_feature_flag_adapter_1.AmplifyCLIFeatureFlagAdapter();
    const sanityCheckRulesList = graphql_transformer_core_1.getSanityCheckRules(isNewAppSyncAPI, ff);
    const buildConfig = {
        ...options,
        buildParameters,
        projectDirectory: resourceDir,
        transformersFactory: transformerListFactory,
        transformersFactoryArgs: [searchableTransformerFlag, storageConfig],
        rootStackFileName: 'cloudformation-template.json',
        currentCloudBackendDirectory: previouslyDeployedBackendDir,
        minify: options.minify,
        featureFlags: ff,
        sanityCheckRules: sanityCheckRulesList,
    };
    const transformerOutput = await graphql_transformer_core_1.buildAPIProject(buildConfig);
    context.print.success(`\nGraphQL schema compiled successfully.\n\nEdit your schema at ${schemaFilePath} or \
place .graphql files in a directory at ${schemaDirPath}`);
    if (!options.dryRun) {
        amplify_cli_core_1.JSONUtilities.writeJson(parametersFilePath, parameters);
    }
    return transformerOutput;
}
exports.transformGraphQLSchema = transformGraphQLSchema;
function getProjectBucket(context) {
    const projectDetails = context.amplify.getProjectDetails();
    const projectBucket = projectDetails.amplifyMeta.providers ? projectDetails.amplifyMeta.providers[constants_1.ProviderName].DeploymentBucketName : '';
    return projectBucket;
}
async function getPreviousDeploymentRootKey(previouslyDeployedBackendDir) {
    let parameters;
    try {
        const parametersPath = path_1.default.join(previouslyDeployedBackendDir, 'build', parametersFileName);
        const parametersExists = fs_extra_1.default.existsSync(parametersPath);
        if (parametersExists) {
            const parametersString = await fs_extra_1.default.readFile(parametersPath);
            parameters = JSON.parse(parametersString.toString());
        }
        return parameters.S3DeploymentRootKey;
    }
    catch (err) {
        return undefined;
    }
}
async function getDirectiveDefinitions(context, resourceDir) {
    const transformList = await getTransformerFactory(context, resourceDir)(true);
    const appSynDirectives = graphql_transformer_core_1.getAppSyncServiceExtraDirectives();
    const transformDirectives = transformList
        .map(transformPluginInst => [transformPluginInst.directive, ...transformPluginInst.typeDefinitions].map(node => graphql_1.print(node)).join('\n'))
        .join('\n');
    return [appSynDirectives, transformDirectives].join('\n');
}
exports.getDirectiveDefinitions = getDirectiveDefinitions;
function s3ResourceAlreadyExists(context) {
    const { amplify } = context;
    try {
        let resourceName;
        const { amplifyMeta } = amplify.getProjectDetails();
        if (amplifyMeta[storageCategory]) {
            const categoryResources = amplifyMeta[storageCategory];
            Object.keys(categoryResources).forEach(resource => {
                if (categoryResources[resource].service === s3ServiceName) {
                    resourceName = resource;
                }
            });
        }
        return resourceName;
    }
    catch (error) {
        if (error.name === 'UndeterminedEnvironmentError') {
            return undefined;
        }
        throw error;
    }
}
function getBucketName(context, s3ResourceName, backEndDir) {
    const { amplify } = context;
    const { amplifyMeta } = amplify.getProjectDetails();
    const stackName = amplifyMeta.providers.awscloudformation.StackName;
    const parametersFilePath = path_1.default.join(backEndDir, storageCategory, s3ResourceName, parametersFileName);
    const bucketParameters = context.amplify.readJsonFile(parametersFilePath);
    const bucketName = stackName.startsWith('amplify-')
        ? `${bucketParameters.bucketName}\${hash}-\${env}`
        : `${bucketParameters.bucketName}${s3ResourceName}-\${env}`;
    return { bucketName };
}
//# sourceMappingURL=transform-graphql-schema.js.map