"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadAPIModels = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const extract_zip_1 = __importDefault(require("extract-zip"));
const promise_sequential_1 = __importDefault(require("promise-sequential"));
const amplify_cli_core_1 = require("amplify-cli-core");
const aws_apigw_1 = require("./aws-utils/aws-apigw");
async function downloadAPIModels(context, allResources) {
    const { amplify } = context;
    const projectConfig = amplify.getProjectConfig();
    const framework = projectConfig.frontend;
    if (['javascript', 'flutter'].includes(framework)) {
        return;
    }
    const resources = allResources.filter(resource => resource.service === 'API Gateway');
    const promises = [];
    if (resources.length > 0) {
        context.print.info('\nCreating API models...');
    }
    for (let i = 0; i < resources.length; i += 1) {
        if (resources[i].output.ApiName) {
            promises.push(() => extractAPIModel(context, resources[i], framework));
        }
    }
    return promise_sequential_1.default(promises);
}
exports.downloadAPIModels = downloadAPIModels;
async function extractAPIModel(context, resource, framework) {
    const apigw = await aws_apigw_1.APIGateway.getInstance(context);
    const apigwParams = getAPIGWRequestParams(context, resource, framework);
    const apiName = resource.output.ApiName;
    const data = await apigw.apigw.getSdk(apigwParams).promise();
    const backendDir = amplify_cli_core_1.pathManager.getBackendDirPath();
    const tempDir = `${backendDir}/.temp`;
    fs_extra_1.default.ensureDirSync(tempDir);
    const buff = Buffer.from(data.body);
    fs_extra_1.default.writeFileSync(`${tempDir}/${apiName}.zip`, buff);
    await extract_zip_1.default(`${tempDir}/${apiName}.zip`, { dir: tempDir });
    copyFilesToSrc(context, apiName, framework);
    fs_extra_1.default.removeSync(tempDir);
}
function copyFilesToSrc(context, apiName, framework) {
    const backendDir = context.amplify.pathManager.getBackendDirPath();
    const tempDir = `${backendDir}/.temp`;
    switch (framework) {
        case 'android':
            {
                const generatedSrc = `${tempDir}/${apiName}-Artifact-1.0/src/main/java`;
                const target = `${context.amplify.getEnvInfo().projectPath}/app/src/main/java`;
                fs_extra_1.default.ensureDirSync(target);
                fs_extra_1.default.copySync(generatedSrc, target);
            }
            break;
        case 'ios':
            {
                const generatedSrc = `${tempDir}/aws-apigateway-ios-swift/generated-src`;
                const target = `${context.amplify.getEnvInfo().projectPath}/generated-src`;
                fs_extra_1.default.ensureDirSync(target);
                fs_extra_1.default.copySync(generatedSrc, target);
            }
            break;
        default:
            throw new Error(`Unsupported framework. ${framework}`);
    }
}
function getAPIGWRequestParams(_, resource, framework) {
    const apiUrl = resource.output.RootUrl;
    const apiName = resource.output.ApiName;
    const firstSplit = apiUrl.split('/');
    const stage = firstSplit[3];
    const secondSplit = firstSplit[2].split('.');
    const apiId = secondSplit[0];
    switch (framework) {
        case 'android':
            return {
                restApiId: apiId,
                sdkType: framework,
                stageName: stage,
                parameters: {
                    groupId: `${apiName}-GroupID`,
                    invokerPackage: apiName,
                    artifactId: `${apiName}-Artifact`,
                    artifactVersion: '1.0',
                },
            };
        case 'ios':
            return {
                restApiId: apiId,
                sdkType: 'swift',
                stageName: stage,
                parameters: {
                    classPrefix: apiName,
                },
            };
        default:
            throw new Error(`Unsupported framework. ${framework}`);
    }
}
//# sourceMappingURL=download-api-models.js.map