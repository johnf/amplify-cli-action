"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminBackendMap = exports.getTempCredsWithAdminTokens = exports.isAmplifyAdminApp = exports.doAdminTokensExist = exports.adminVerifyUrl = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const lodash_1 = __importDefault(require("lodash"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const admin_login_1 = require("../admin-login");
const adminVerifyUrl = (appId, envName, region) => {
    const baseUrl = exports.adminBackendMap[region].amplifyAdminUrl;
    return `${baseUrl}/admin/${appId}/${envName}/verify/`;
};
exports.adminVerifyUrl = adminVerifyUrl;
function doAdminTokensExist(appId) {
    if (!appId) {
        throw `Failed to check if admin credentials exist: appId is undefined`;
    }
    return !!amplify_cli_core_1.stateManager.getAmplifyAdminConfigEntry(appId);
}
exports.doAdminTokensExist = doAdminTokensExist;
async function isAmplifyAdminApp(appId) {
    if (!appId) {
        throw `Failed to check if Admin UI is enabled: appId is undefined`;
    }
    let appState = await getAdminAppState(appId, 'us-east-1');
    if (appState.appId && appState.region && appState.region !== 'us-east-1') {
        appState = await getAdminAppState(appId, appState.region);
    }
    return { isAdminApp: !!appState.appId, region: appState.region };
}
exports.isAmplifyAdminApp = isAmplifyAdminApp;
async function getTempCredsWithAdminTokens(context, appId) {
    if (!doAdminTokensExist(appId)) {
        await admin_login_1.adminLoginFlow(context, appId);
    }
    const authConfig = await getRefreshedTokens(context, appId);
    const { idToken, IdentityId, region } = authConfig;
    const awsConfig = await getAdminCognitoCredentials(idToken, IdentityId, region);
    aws_sdk_1.default.config.update(awsConfig);
    return await getAdminStsCredentials(idToken, region);
}
exports.getTempCredsWithAdminTokens = getTempCredsWithAdminTokens;
async function getAdminAppState(appId, region) {
    const res = await node_fetch_1.default(`${exports.adminBackendMap[region].appStateUrl}/AppState/?appId=${appId}`);
    return res.json();
}
async function getAdminCognitoCredentials(idToken, identityId, region) {
    const cognitoIdentity = new aws_sdk_1.default.CognitoIdentity({ region });
    const login = idToken.payload.iss.replace('https://', '');
    const { Credentials } = await cognitoIdentity
        .getCredentialsForIdentity({
        IdentityId: identityId,
        Logins: {
            [login]: idToken.jwtToken,
        },
    })
        .promise();
    return {
        accessKeyId: Credentials.AccessKeyId,
        expiration: Credentials.Expiration,
        region,
        secretAccessKey: Credentials.SecretKey,
        sessionToken: Credentials.SessionToken,
    };
}
async function getAdminStsCredentials(idToken, region) {
    const sts = new aws_sdk_1.default.STS();
    const { Credentials } = await sts
        .assumeRole({
        RoleArn: idToken.payload['cognito:preferred_role'],
        RoleSessionName: 'amplifyadmin',
    })
        .promise();
    return {
        accessKeyId: Credentials.AccessKeyId,
        expiration: Credentials.Expiration,
        region,
        secretAccessKey: Credentials.SecretAccessKey,
        sessionToken: Credentials.SessionToken,
    };
}
async function getRefreshedTokens(context, appId) {
    const authConfig = amplify_cli_core_1.stateManager.getAmplifyAdminConfigEntry(appId);
    if (isJwtExpired(authConfig.idToken)) {
        let refreshedTokens;
        try {
            refreshedTokens = (await refreshJWTs(authConfig)).AuthenticationResult;
            authConfig.accessToken.jwtToken = refreshedTokens.AccessToken;
            authConfig.idToken.jwtToken = refreshedTokens.IdToken;
            amplify_cli_core_1.stateManager.setAmplifyAdminConfigEntry(appId, authConfig);
        }
        catch (_a) {
            await admin_login_1.adminLoginFlow(context, appId, null, authConfig.region);
        }
    }
    return authConfig;
}
function isJwtExpired(token) {
    const expiration = lodash_1.default.get(token, ['payload', 'exp'], 0);
    const secSinceEpoch = Math.round(new Date().getTime() / 1000);
    return secSinceEpoch >= expiration - 60;
}
async function refreshJWTs(authConfig) {
    const CognitoISP = new aws_sdk_1.default.CognitoIdentityServiceProvider({ region: authConfig.region });
    return await CognitoISP.initiateAuth({
        AuthFlow: 'REFRESH_TOKEN',
        AuthParameters: {
            REFRESH_TOKEN: authConfig.refreshToken.token,
        },
        ClientId: authConfig.accessToken.payload.client_id,
    }).promise();
}
exports.adminBackendMap = {
    'ap-northeast-1': {
        amplifyAdminUrl: 'https://ap-northeast-1.admin.amplifyapp.com',
        appStateUrl: 'https://9ug6dmgf8k.execute-api.ap-northeast-1.amazonaws.com/wave4Prod',
    },
    'ap-northeast-2': {
        amplifyAdminUrl: 'https://ap-northeast-2.admin.amplifyapp.com',
        appStateUrl: 'https://ljnzstyu75.execute-api.ap-northeast-2.amazonaws.com/wave4Prod',
    },
    'ap-south-1': {
        amplifyAdminUrl: 'https://ap-south-1.admin.amplifyapp.com',
        appStateUrl: 'https://pnxd1wa44e.execute-api.ap-south-1.amazonaws.com/wave4Prod',
    },
    'ap-southeast-1': {
        amplifyAdminUrl: 'https://ap-southeast-1.admin.amplifyapp.com',
        appStateUrl: 'https://l5fi62t6yf.execute-api.ap-southeast-1.amazonaws.com/wave3Prod',
    },
    'ap-southeast-2': {
        amplifyAdminUrl: 'https://ap-southeast-2.admin.amplifyapp.com',
        appStateUrl: 'https://wv7blgges9.execute-api.ap-southeast-2.amazonaws.com/wave4Prod',
    },
    'ca-central-1': {
        amplifyAdminUrl: 'https://ca-central-1.admin.amplifyapp.com',
        appStateUrl: 'https://vnh7syjssb.execute-api.ca-central-1.amazonaws.com/wave5Prod',
    },
    'eu-central-1': {
        amplifyAdminUrl: 'https://eu-central-1.admin.amplifyapp.com',
        appStateUrl: 'https://atz311uyx5.execute-api.eu-central-1.amazonaws.com/wave4Prod',
    },
    'eu-west-1': {
        amplifyAdminUrl: 'https://eu-west-1.admin.amplifyapp.com',
        appStateUrl: 'https://8dbn4hxfme.execute-api.eu-west-1.amazonaws.com/wave3Prod',
    },
    'eu-west-2': {
        amplifyAdminUrl: 'https://eu-west-2.admin.amplifyapp.com',
        appStateUrl: 'https://apafhnmqme.execute-api.eu-west-2.amazonaws.com/wave1Prod',
    },
    'us-east-1': {
        amplifyAdminUrl: 'https://us-east-1.admin.amplifyapp.com',
        appStateUrl: 'https://e7auv6no3g.execute-api.us-east-1.amazonaws.com/wave3Prod',
    },
    'us-east-2': {
        amplifyAdminUrl: 'https://us-east-2.admin.amplifyapp.com',
        appStateUrl: 'https://x1wkkmql32.execute-api.us-east-2.amazonaws.com/wave2Prod',
    },
    'us-west-2': {
        amplifyAdminUrl: 'https://us-west-2.admin.amplifyapp.com',
        appStateUrl: 'https://3ne6skqg0g.execute-api.us-west-2.amazonaws.com/wave4Prod',
    },
};
//# sourceMappingURL=admin-helpers.js.map