"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminLoginServer = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const aws_sdk_1 = require("aws-sdk");
const body_parser_1 = __importDefault(require("body-parser"));
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const jose_1 = require("jose");
const lodash_1 = __importDefault(require("lodash"));
const node_fetch_1 = __importDefault(require("node-fetch"));
class AdminLoginServer {
    constructor(appId, originUrl, print) {
        this.port = 4242;
        this.host = '0.0.0.0';
        this.appId = appId;
        this.corsOptions = {
            origin: [originUrl],
            methods: ['POST', 'OPTIONS'],
            allowedHeaders: 'Content-Type',
        };
        this.print = print;
        this.app = express_1.default();
        this.app.use(cors_1.default(this.corsOptions));
        this.app.use(body_parser_1.default.json());
    }
    async startServer(callback) {
        await this.setupRoute(callback);
        this.server = this.app.listen(this.getPort(), this.getHost());
    }
    getHost() {
        return this.host;
    }
    getPort() {
        return this.port;
    }
    async getIdentityId(idToken, IdentityPoolId, region) {
        const cognitoIdentity = new aws_sdk_1.CognitoIdentity({ region });
        const login = idToken.payload.iss.replace('https://', '');
        const logins = {
            [login]: idToken.jwtToken,
        };
        const { IdentityId } = await cognitoIdentity
            .getId({
            IdentityPoolId,
            Logins: logins,
        })
            .promise();
        if (!IdentityId) {
            throw new Error('IdentityId not defined. Amplify CLI was unable to retrieve credentials.');
        }
        return IdentityId;
    }
    async setupRoute(callback) {
        this.app.post('/amplifyadmin/', async (req, res) => {
            if (!req.body || req.body.error) {
                this.shutdown();
                if (req.body.error === 'CANCELLED') {
                    this.print.info('Login cancelled');
                    process.exit(0);
                }
                throw new Error('Failed to receive expected authentication tokens.');
            }
            try {
                await this.storeTokens(req.body, this.appId);
                delete req.body;
                res.sendStatus(200);
            }
            catch (err) {
                res.sendStatus(500);
                throw new Error(`Failed to receive expected authentication tokens. Error: [${err}]`);
            }
            callback();
        });
    }
    validateTokens(tokens, keyStore) {
        const issuer = tokens.idToken.payload.iss;
        const audience = tokens.idToken.payload.aud;
        const decodedJwtId = jose_1.JWT.IdToken.verify(tokens.idToken.jwtToken, keyStore, { issuer, audience });
        const decodedJwtAccess = jose_1.JWT.verify(tokens.accessToken.jwtToken, keyStore);
        return lodash_1.default.isEqual(decodedJwtId, tokens.idToken.payload) && lodash_1.default.isEqual(decodedJwtAccess, tokens.accessToken.payload);
    }
    async storeTokens(payload, appId) {
        const issuer = payload.idToken.payload.iss;
        const res = await node_fetch_1.default(`${issuer}/.well-known/jwks.json`);
        const { keys } = await res.json();
        const keyStore = new jose_1.JWKS.KeyStore(keys.map(key => jose_1.JWK.asKey(key)));
        const areTokensValid = this.validateTokens({
            idToken: payload.idToken,
            accessToken: payload.accessToken,
        }, keyStore);
        if (areTokensValid) {
            const IdentityId = await this.getIdentityId(payload.idToken, payload.IdentityPoolId, payload.region);
            const config = { ...payload, IdentityId };
            amplify_cli_core_1.stateManager.setAmplifyAdminConfigEntry(appId, config);
        }
    }
    shutdown() {
        this.server.close();
    }
}
exports.AdminLoginServer = AdminLoginServer;
//# sourceMappingURL=admin-login-server.js.map