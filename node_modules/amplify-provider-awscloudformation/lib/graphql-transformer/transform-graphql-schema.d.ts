import { TransformerPluginProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { TransformerProjectConfig } from '@aws-amplify/graphql-transformer-core';
import { AppSyncAuthConfiguration } from '@aws-amplify/graphql-transformer-core';
import { Template } from '@aws-amplify/graphql-transformer-core/lib/config/project-config';
export declare function transformGraphQLSchema(context: any, options: any): Promise<import("@aws-amplify/graphql-transformer-core").DeploymentResources>;
export declare function getDirectiveDefinitions(context: any, resourceDir: any): Promise<string>;
declare type TransformerFactoryArgs = {
    addSearchableTransformer: boolean;
    storageConfig?: any;
};
export declare type ProjectOptions<T> = {
    buildParameters: {
        S3DeploymentBucket: string;
        S3DeploymentRootKey: string;
    };
    projectDirectory?: string;
    transformersFactory: (options: T) => TransformerPluginProvider[];
    transformersFactoryArgs: T;
    rootStackFileName: 'cloudformation-template.json';
    currentCloudBackendDirectory: string;
    minify: boolean;
    lastDeployedProjectConfig?: TransformerProjectConfig;
    projectConfig: TransformerProjectConfig;
    dryRun?: boolean;
    authConfig?: AppSyncAuthConfiguration;
    stacks: Record<string, Template>;
};
export declare function buildAPIProject(opts: ProjectOptions<TransformerFactoryArgs>): Promise<import("@aws-amplify/graphql-transformer-core").DeploymentResources>;
export {};
//# sourceMappingURL=transform-graphql-schema.d.ts.map