"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwIfNotJSONExt = exports.writeDeploymentToDisk = exports.readFromPath = exports.loadDiffableProject = exports.getGqlUpdatedResource = exports.getGQLDiff = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path = __importStar(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
const amplify_cli_core_1 = require("amplify-cli-core");
const deep_diff_1 = require("deep-diff");
const ROOT_STACK_FILE_NAME = 'cloudformation-template.json';
const PARAMETERS_FILE_NAME = 'parameters.json';
const getGQLDiff = (currentBackendDir, cloudBackendDir) => {
    const currentBuildDir = path.join(currentBackendDir, 'build');
    const cloudBuildDir = path.join(cloudBackendDir, 'build');
    if (fs_extra_1.default.existsSync(cloudBuildDir) && fs_extra_1.default.existsSync(currentBuildDir)) {
        const current = loadDiffableProject(cloudBuildDir, ROOT_STACK_FILE_NAME);
        const next = loadDiffableProject(currentBuildDir, ROOT_STACK_FILE_NAME);
        return { current, next, diff: deep_diff_1.diff(current, next) };
    }
    return null;
};
exports.getGQLDiff = getGQLDiff;
const getGqlUpdatedResource = (resources) => {
    if (resources.length > 0) {
        const resource = resources[0];
        if (resource.service === 'AppSync' &&
            resource.providerMetadata &&
            resource.providerMetadata.logicalId &&
            resource.providerPlugin === 'awscloudformation') {
            return resource;
        }
    }
    return null;
};
exports.getGqlUpdatedResource = getGqlUpdatedResource;
function loadDiffableProject(path, rootStackName) {
    const project = readFromPath(path);
    const currentStacks = project.stacks || {};
    const diffableProject = {
        stacks: {},
        root: {},
    };
    for (const key of Object.keys(currentStacks)) {
        diffableProject.stacks[key] = amplify_cli_core_1.JSONUtilities.parse(project.stacks[key]);
    }
    if (project[rootStackName]) {
        diffableProject.root = amplify_cli_core_1.JSONUtilities.parse(project[rootStackName]);
    }
    return diffableProject;
}
exports.loadDiffableProject = loadDiffableProject;
function readFromPath(directory) {
    const pathExists = fs_extra_1.default.pathExistsSync(directory);
    if (!pathExists) {
        return;
    }
    const dirStats = fs_extra_1.default.lstatSync(directory);
    if (!dirStats.isDirectory()) {
        const buf = fs_extra_1.default.readFileSync(directory);
        return buf.toString();
    }
    const files = fs_extra_1.default.readdirSync(directory);
    const accum = {};
    for (const fileName of files) {
        const fullPath = path.join(directory, fileName);
        const value = readFromPath(fullPath);
        accum[fileName] = value;
    }
    return accum;
}
exports.readFromPath = readFromPath;
async function writeDeploymentToDisk(deployment, directory, rootStackFileName = 'rootStack.json', buildParameters, minify = false) {
    rimraf_1.default.sync(directory);
    fs_extra_1.default.ensureDirSync(directory);
    const schema = deployment.schema;
    const fullSchemaPath = path.normalize(directory + `/schema.graphql`);
    fs_extra_1.default.writeFileSync(fullSchemaPath, schema);
    initStacksAndResolversDirectories(directory);
    const resolverFileNames = Object.keys(deployment.resolvers);
    const resolverRootPath = resolverDirectoryPath(directory);
    for (const resolverFileName of resolverFileNames) {
        const fullResolverPath = path.normalize(resolverRootPath + '/' + resolverFileName);
        fs_extra_1.default.writeFileSync(fullResolverPath, deployment.resolvers[resolverFileName]);
    }
    const pipelineFunctions = Object.keys(deployment.pipelineFunctions);
    const pipelineFunctionRootPath = pipelineFunctionDirectoryPath(directory);
    for (const functionFileName of pipelineFunctions) {
        const fullTemplatePath = path.normalize(pipelineFunctionRootPath + '/' + functionFileName);
        fs_extra_1.default.writeFileSync(fullTemplatePath, deployment.pipelineFunctions[functionFileName]);
    }
    const stackNames = Object.keys(deployment.stacks);
    const stackRootPath = stacksDirectoryPath(directory);
    for (const stackFileName of stackNames) {
        const fileNameParts = stackFileName.split('.');
        if (fileNameParts.length === 1) {
            fileNameParts.push('json');
        }
        const fullFileName = fileNameParts.join('.');
        throwIfNotJSONExt(fullFileName);
        const fullStackPath = path.normalize(stackRootPath + '/' + fullFileName);
        let stackString = deployment.stacks[stackFileName];
        stackString =
            typeof stackString === 'string'
                ? deployment.stacks[stackFileName]
                : amplify_cli_core_1.JSONUtilities.stringify(deployment.stacks[stackFileName], { minify });
        fs_extra_1.default.writeFileSync(fullStackPath, stackString);
    }
    const functionNames = Object.keys(deployment.functions);
    const functionRootPath = path.normalize(directory + `/functions`);
    if (!fs_extra_1.default.existsSync(functionRootPath)) {
        fs_extra_1.default.mkdirSync(functionRootPath);
    }
    for (const functionName of functionNames) {
        const fullFunctionPath = path.normalize(functionRootPath + '/' + functionName);
        const zipContents = fs_extra_1.default.readFileSync(deployment.functions[functionName]);
        fs_extra_1.default.writeFileSync(fullFunctionPath, zipContents);
    }
    const rootStack = deployment.rootStack;
    const rootStackPath = path.normalize(directory + `/${rootStackFileName}`);
    const rootStackString = minify ? JSON.stringify(rootStack) : JSON.stringify(rootStack, null, 4);
    fs_extra_1.default.writeFileSync(rootStackPath, rootStackString);
    const jsonString = JSON.stringify(buildParameters, null, 4);
    const parametersOutputFilePath = path.join(directory, PARAMETERS_FILE_NAME);
    fs_extra_1.default.writeFileSync(parametersOutputFilePath, jsonString);
}
exports.writeDeploymentToDisk = writeDeploymentToDisk;
function initStacksAndResolversDirectories(directory) {
    const resolverRootPath = resolverDirectoryPath(directory);
    if (!fs_extra_1.default.existsSync(resolverRootPath)) {
        fs_extra_1.default.mkdirSync(resolverRootPath);
    }
    const pipelineFunctionRootPath = pipelineFunctionDirectoryPath(directory);
    if (!fs_extra_1.default.existsSync(pipelineFunctionRootPath)) {
        fs_extra_1.default.mkdirSync(pipelineFunctionRootPath);
    }
    const stackRootPath = stacksDirectoryPath(directory);
    if (!fs_extra_1.default.existsSync(stackRootPath)) {
        fs_extra_1.default.mkdirSync(stackRootPath);
    }
}
function pipelineFunctionDirectoryPath(rootPath) {
    return path.normalize(path.join(rootPath, 'pipelineFunctions'));
}
function resolverDirectoryPath(rootPath) {
    return path.normalize(rootPath + `/resolvers`);
}
function stacksDirectoryPath(rootPath) {
    return path.normalize(rootPath + `/stacks`);
}
function throwIfNotJSONExt(stackFile) {
    const extension = path.extname(stackFile);
    if (extension === '.yaml' || extension === '.yml') {
        throw new Error(`Yaml is not yet supported. Please convert the CloudFormation stack ${stackFile} to json.`);
    }
    if (extension !== '.json') {
        throw new Error(`Invalid extension ${extension} for stack ${stackFile}`);
    }
}
exports.throwIfNotJSONExt = throwIfNotJSONExt;
//# sourceMappingURL=utils.js.map