"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertUnreachable = exports.GraphQLResourceManager = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const iterative_deployment_1 = require("../iterative-deployment");
const utils_1 = require("./utils");
const gsi_diff_helpers_1 = require("./gsi-diff-helpers");
const amplify_resource_state_utils_1 = require("../utils/amplify-resource-state-utils");
const upload_appsync_files_1 = require("../upload-appsync-files");
const dynamodb_gsi_helpers_1 = require("./dynamodb-gsi-helpers");
const graphql_transformer_core_1 = require("graphql-transformer-core");
const aws_sdk_1 = require("aws-sdk");
const lodash_1 = __importDefault(require("lodash"));
const configuration_manager_1 = require("../configuration-manager");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
class GraphQLResourceManager {
    constructor(props) {
        this.run = async () => {
            const gqlDiff = utils_1.getGQLDiff(this.backendApiProjectRoot, this.cloudBackendApiProjectRoot);
            try {
                const diffRules = [
                    graphql_transformer_core_1.cantEditGSIKeySchemaRule,
                    graphql_transformer_core_1.cantBatchMutateGSIAtUpdateTimeRule,
                    graphql_transformer_core_1.cantAddAndRemoveGSIAtSameTimeRule,
                ];
                const projectRules = [graphql_transformer_core_1.cantHaveMoreThan500ResourcesRule];
                graphql_transformer_core_1.sanityCheckDiffs(gqlDiff.diff, gqlDiff.current, gqlDiff.next, diffRules, projectRules);
            }
            catch (err) {
                if (err.name !== 'InvalidGSIMigrationError') {
                    throw err;
                }
            }
            this.gsiManagement(gqlDiff.diff, gqlDiff.current, gqlDiff.next);
            return await this.getDeploymentSteps();
        };
        this.getDeploymentSteps = async () => {
            if (this.templateState.isEmpty())
                return [];
            let count = 1;
            const gqlSteps = new Array();
            const cloudBuildDir = path_1.default.join(this.cloudBackendApiProjectRoot, 'build');
            const stateFileDir = this.getStateFilesDirectory();
            const tableNameMap = await amplify_resource_state_utils_1.getTableNames(this.cfnClient, this.templateState.getKeys(), this.resourceMeta.stackId);
            const { parameters, capabilities } = await amplify_resource_state_utils_1.getPreviousDeploymentRecord(this.cfnClient, this.resourceMeta.stackId);
            const buildHash = await upload_appsync_files_1.hashDirectory(this.backendApiProjectRoot);
            let previousStepPath = cloudBuildDir;
            let previousStep = await this.getCurrentlyDeployedStackStep();
            let previousMetaKey = previousStep.previousMetaKey;
            while (!this.templateState.isEmpty()) {
                const stepNumber = count.toString().padStart(2, '0');
                const stepPath = path_1.default.join(stateFileDir, stepNumber);
                fs_extra_1.default.copySync(previousStepPath, stepPath);
                previousStepPath = stepPath;
                const tables = this.templateState.getKeys();
                const tableNames = [];
                tables.forEach(tableName => {
                    tableNames.push(tableNameMap.get(tableName));
                    const tableNameStackFilePath = path_1.default.join(stepPath, 'stacks', `${tableName}.json`);
                    fs_extra_1.default.ensureDirSync(path_1.default.dirname(tableNameStackFilePath));
                    amplify_cli_core_1.JSONUtilities.writeJson(tableNameStackFilePath, this.templateState.pop(tableName));
                });
                const deploymentRootKey = `${upload_appsync_files_1.ROOT_APPSYNC_S3_KEY}/${buildHash}/states/${stepNumber}`;
                const deploymentStep = {
                    stackTemplatePathOrUrl: `${deploymentRootKey}/cloudformation-template.json`,
                    previousMetaKey: previousMetaKey,
                    parameters: { ...parameters, S3DeploymentRootKey: deploymentRootKey },
                    stackName: this.resourceMeta.stackId,
                    tableNames: tableNames,
                    capabilities,
                };
                const deploymentStepStatePath = path_1.default.join(stepPath, iterative_deployment_1.DEPLOYMENT_META);
                amplify_cli_core_1.JSONUtilities.writeJson(deploymentStepStatePath, deploymentStep);
                gqlSteps.push({
                    deployment: deploymentStep,
                    rollback: previousStep,
                });
                previousStep = deploymentStep;
                previousMetaKey = `${deploymentRootKey}/${iterative_deployment_1.DEPLOYMENT_META}`;
                count++;
            }
            return gqlSteps;
        };
        this.getCurrentlyDeployedStackStep = async () => {
            const cloudBuildDir = path_1.default.join(this.cloudBackendApiProjectRoot, 'build');
            const stateFileDir = this.getStateFilesDirectory();
            const { parameters, capabilities } = await amplify_resource_state_utils_1.getPreviousDeploymentRecord(this.cfnClient, this.resourceMeta.stackId);
            const buildHash = await upload_appsync_files_1.hashDirectory(this.backendApiProjectRoot);
            const stepNumber = 'initial-stack';
            const stepPath = path_1.default.join(stateFileDir, `${stepNumber}`);
            fs_extra_1.default.copySync(cloudBuildDir, stepPath);
            const deploymentRootKey = `${upload_appsync_files_1.ROOT_APPSYNC_S3_KEY}/${buildHash}/states/${stepNumber}`;
            const currentDeployedStep = {
                stackTemplatePathOrUrl: `${deploymentRootKey}/cloudformation-template.json`,
                previousMetaKey: `${deploymentRootKey}/${iterative_deployment_1.DEPLOYMENT_META}`,
                parameters: { ...parameters, S3DeploymentRootKey: deploymentRootKey },
                stackName: this.resourceMeta.stackId,
                capabilities,
                tableNames: [],
            };
            const deploymentStateStep = path_1.default.join(stepPath, iterative_deployment_1.DEPLOYMENT_META);
            amplify_cli_core_1.JSONUtilities.writeJson(deploymentStateStep, currentDeployedStep);
            return currentDeployedStep;
        };
        this.getStateFilesDirectory = () => {
            const buildDir = path_1.default.join(this.backendApiProjectRoot, 'build');
            return path_1.default.join(buildDir, 'states');
        };
        this.getCloudStateFilesDirectory = async () => {
            const buildHash = await upload_appsync_files_1.hashDirectory(this.backendApiProjectRoot);
            return `${upload_appsync_files_1.ROOT_APPSYNC_S3_KEY}/${buildHash}/states`;
        };
        this.gsiManagement = (diffs, currentState, nextState) => {
            const gsiChanges = lodash_1.default.filter(diffs, diff => {
                return diff.path.includes('GlobalSecondaryIndexes');
            });
            const tableWithGSIChanges = lodash_1.default.uniqBy(gsiChanges, diff => { var _a; return (_a = diff.path) === null || _a === void 0 ? void 0 : _a.slice(0, 3).join('/'); }).map(gsiChange => {
                const tableName = gsiChange.path[3];
                const stackName = gsiChange.path[1].split('.')[0];
                const currentTable = this.getTable(gsiChange, currentState);
                const nextTable = this.getTable(gsiChange, nextState);
                return {
                    tableName,
                    stackName,
                    currentTable,
                    nextTable,
                };
            });
            for (const gsiChange of tableWithGSIChanges) {
                const changeSteps = gsi_diff_helpers_1.getGSIDiffs(gsiChange.currentTable, gsiChange.nextTable);
                const stackName = gsiChange.stackName;
                const tableName = gsiChange.tableName;
                for (const changeStep of changeSteps) {
                    const ddbResource = this.templateState.getLatest(stackName) || this.getStack(stackName, currentState);
                    let gsiRecord;
                    switch (changeStep.type) {
                        case gsi_diff_helpers_1.GSIChange.Add:
                            gsiRecord = dynamodb_gsi_helpers_1.getGSIDetails(changeStep.indexName, gsiChange.nextTable);
                            this.addGSI(gsiRecord, tableName, ddbResource);
                            this.templateState.add(stackName, amplify_cli_core_1.JSONUtilities.stringify(ddbResource));
                            break;
                        case gsi_diff_helpers_1.GSIChange.Delete:
                            this.deleteGSI(changeStep.indexName, tableName, ddbResource);
                            this.templateState.add(stackName, amplify_cli_core_1.JSONUtilities.stringify(ddbResource));
                            break;
                        case gsi_diff_helpers_1.GSIChange.Update:
                            this.deleteGSI(changeStep.indexName, tableName, ddbResource);
                            this.templateState.add(stackName, amplify_cli_core_1.JSONUtilities.stringify(ddbResource));
                            gsiRecord = dynamodb_gsi_helpers_1.getGSIDetails(changeStep.indexName, gsiChange.nextTable);
                            this.addGSI(gsiRecord, tableName, ddbResource);
                            this.templateState.add(stackName, amplify_cli_core_1.JSONUtilities.stringify(ddbResource));
                            break;
                        default:
                            exports.assertUnreachable(changeStep.type);
                    }
                }
            }
        };
        this.getTable = (gsiChange, proj) => {
            return proj.stacks[gsiChange.path[1]].Resources[gsiChange.path[3]];
        };
        this.addGSI = (gsiRecord, tableName, template) => {
            const table = template.Resources[tableName];
            template.Resources[tableName] = dynamodb_gsi_helpers_1.addGSI(gsiRecord, table);
        };
        this.deleteGSI = (indexName, tableName, template) => {
            const table = template.Resources[tableName];
            template.Resources[tableName] = dynamodb_gsi_helpers_1.removeGSI(indexName, table);
        };
        if (!props.resourceMeta) {
            throw Error('No GraphQL API enabled.');
        }
        this.cfnClient = props.cfnClient;
        this.resourceMeta = props.resourceMeta;
        this.backendApiProjectRoot = path_1.default.join(props.backendDir, GraphQLResourceManager.categoryName, this.resourceMeta.resourceName);
        this.cloudBackendApiProjectRoot = path_1.default.join(props.cloudBackendDir, GraphQLResourceManager.categoryName, this.resourceMeta.resourceName);
        this.templateState = new amplify_resource_state_utils_1.TemplateState();
    }
    getStack(stackName, proj) {
        return proj.stacks[`${stackName}.json`];
    }
}
exports.GraphQLResourceManager = GraphQLResourceManager;
GraphQLResourceManager.serviceName = 'AppSync';
GraphQLResourceManager.categoryName = 'api';
GraphQLResourceManager.createInstance = async (context, gqlResource, StackId) => {
    try {
        const cred = await configuration_manager_1.loadConfiguration(context);
        const cfn = new aws_sdk_1.CloudFormation(cred);
        const apiStack = await cfn
            .describeStackResources({ StackName: StackId, LogicalResourceId: gqlResource.providerMetadata.logicalId })
            .promise();
        return new GraphQLResourceManager({
            cfnClient: cfn,
            resourceMeta: { ...gqlResource, stackId: apiStack.StackResources[0].PhysicalResourceId },
            backendDir: amplify_cli_core_1.pathManager.getBackendDirPath(),
            cloudBackendDir: amplify_cli_core_1.pathManager.getCurrentCloudBackendDirPath(),
        });
    }
    catch (err) {
        throw err;
    }
};
const assertUnreachable = (_) => {
    throw new Error('Default case should never reach');
};
exports.assertUnreachable = assertUnreachable;
//# sourceMappingURL=amplify-graphql-resource-manager.js.map