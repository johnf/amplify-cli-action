"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfigurationForEnv = exports.resolveAppId = void 0;
const attachBackendWorker = require('./attach-backend');
const initializer = require('./initializer');
const initializeEnv = require('./initialize-env');
const resourcePusher = require('./push-resources');
const envRemover = require('./delete-env');
const providerUtils = require('./utility-functions');
const constants = require('./constants');
const configManager = require('./configuration-manager');
const setupNewUser = require('./setup-new-user');
const { displayHelpfulURLs } = require('./display-helpful-urls');
const aws = require('./aws-utils/aws');
const pinpoint = require('./aws-utils/aws-pinpoint');
const { getLexRegionMapping } = require('./aws-utils/aws-lex');
const amplifyService = require('./aws-utils/aws-amplify');
const consoleCommand = require('./console');
const { loadResourceParameters, saveResourceParameters } = require('./resourceParams');
const { formUserAgentParam } = require('./aws-utils/user-agent');
const predictionsRegionMap = require('./aws-predictions-regions');
const admin_login_1 = require("./admin-login");
const admin_helpers_1 = require("./utils/admin-helpers");
const CognitoUserPoolService_1 = require("./aws-utils/CognitoUserPoolService");
const IdentityPoolService_1 = require("./aws-utils/IdentityPoolService");
const S3Service_1 = require("./aws-utils/S3Service");
const DynamoDBService_1 = require("./aws-utils/DynamoDBService");
const resolve_appId_1 = require("./utils/resolve-appId");
const configuration_manager_1 = require("./configuration-manager");
var resolve_appId_2 = require("./utils/resolve-appId");
Object.defineProperty(exports, "resolveAppId", { enumerable: true, get: function () { return resolve_appId_2.resolveAppId; } });
var configuration_manager_2 = require("./configuration-manager");
Object.defineProperty(exports, "loadConfigurationForEnv", { enumerable: true, get: function () { return configuration_manager_2.loadConfigurationForEnv; } });
function init(context) {
    return initializer.run(context);
}
function initEnv(context, providerMetadata) {
    return initializeEnv.run(context, providerMetadata);
}
async function attachBackend(context) {
    await attachBackendWorker.run(context);
}
function onInitSuccessful(context) {
    return initializer.onInitSuccessful(context);
}
function pushResources(context, resourceList) {
    return resourcePusher.run(context, resourceList);
}
function storeCurrentCloudBackend(context) {
    return resourcePusher.storeCurrentCloudBackend(context);
}
function deleteEnv(context, envName, deleteS3) {
    return envRemover.run(context, envName, deleteS3);
}
function configure(context) {
    return configManager.configure(context);
}
async function getConfiguredAWSClient(context, category, action) {
    await aws.configureWithCreds(context);
    category = category || 'missing';
    action = action || ['missing'];
    const userAgentAction = `${category}:${action[0]}`;
    aws.config.update({
        customUserAgent: formUserAgentParam(context, userAgentAction),
    });
    return aws;
}
function getConfiguredPinpointClient(context, category, action, envName) {
    return pinpoint.getConfiguredPinpointClient(context, category, action, envName);
}
function getPinpointRegionMapping() {
    return pinpoint.getPinpointRegionMapping();
}
function getConfiguredAmplifyClient(context, category, action, options = {}) {
    return amplifyService.getConfiguredAmplifyClient(context, category, action, options);
}
function showHelpfulLinks(context, resources) {
    return displayHelpfulURLs(context, resources);
}
function configureNewUser(context) {
    return setupNewUser.run(context);
}
function openConsole(context) {
    return consoleCommand.run(context);
}
module.exports = {
    adminBackendMap: admin_helpers_1.adminBackendMap,
    adminLoginFlow: admin_login_1.adminLoginFlow,
    console: openConsole,
    attachBackend,
    init,
    initEnv,
    isAmplifyAdminApp: admin_helpers_1.isAmplifyAdminApp,
    onInitSuccessful,
    configure,
    configureNewUser,
    constants,
    pushResources,
    storeCurrentCloudBackend,
    providerUtils,
    setupNewUser,
    getConfiguredAWSClient,
    getPinpointRegionMapping,
    getLexRegionMapping,
    getConfiguredPinpointClient,
    getConfiguredAmplifyClient,
    showHelpfulLinks,
    deleteEnv,
    loadResourceParameters,
    saveResourceParameters,
    predictionsRegionMap,
    ...require('./amplify-plugin-index'),
    CognitoUserPoolService: CognitoUserPoolService_1.CognitoUserPoolService,
    createCognitoUserPoolService: CognitoUserPoolService_1.createCognitoUserPoolService,
    IdentityPoolService: IdentityPoolService_1.IdentityPoolService,
    createIdentityPoolService: IdentityPoolService_1.createIdentityPoolService,
    S3Service: S3Service_1.S3Service,
    createS3Service: S3Service_1.createS3Service,
    DynamoDBService: DynamoDBService_1.DynamoDBService,
    createDynamoDBService: DynamoDBService_1.createDynamoDBService,
    resolveAppId: resolve_appId_1.resolveAppId,
    loadConfigurationForEnv: configuration_manager_1.loadConfigurationForEnv,
};
//# sourceMappingURL=index.js.map