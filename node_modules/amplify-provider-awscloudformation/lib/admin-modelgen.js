"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminModelgen = void 0;
const ora_1 = __importDefault(require("ora"));
const amplify_cli_core_1 = require("amplify-cli-core");
const graphql_transformer_core_1 = require("graphql-transformer-core");
const path = __importStar(require("path"));
const constants_1 = require("./constants");
const admin_helpers_1 = require("./utils/admin-helpers");
const aws_amplify_backend_1 = require("./aws-utils/aws-amplify-backend");
async function adminModelgen(context, resources) {
    var _a, _b;
    const appSyncResources = resources.filter(resource => resource.service === 'AppSync');
    if (appSyncResources.length === 0) {
        return;
    }
    const appSyncResource = appSyncResources[0];
    const { resourceName } = appSyncResource;
    const amplifyMeta = amplify_cli_core_1.stateManager.getMeta();
    const localEnvInfo = amplify_cli_core_1.stateManager.getLocalEnvInfo();
    const appId = (_b = (_a = amplifyMeta === null || amplifyMeta === void 0 ? void 0 : amplifyMeta.providers) === null || _a === void 0 ? void 0 : _a[constants_1.ProviderName]) === null || _b === void 0 ? void 0 : _b.AmplifyAppId;
    if (!appId) {
        return;
    }
    const envName = localEnvInfo.envName;
    const { isAdminApp } = await admin_helpers_1.isAmplifyAdminApp(appId);
    const isDSEnabled = await graphql_transformer_core_1.isDataStoreEnabled(path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), 'api', resourceName));
    if (!isAdminApp || !isDSEnabled) {
        return;
    }
    const spinner = ora_1.default('Generating models in the cloud...\n').start();
    const amplifyBackendInstance = await aws_amplify_backend_1.AmplifyBackend.getInstance(context);
    try {
        const jobStartDetails = await amplifyBackendInstance.amplifyBackend
            .generateBackendAPIModels({
            AppId: appId,
            BackendEnvironmentName: envName,
            ResourceName: resourceName,
        })
            .promise();
        const jobCompletionDetails = await pollUntilDone(jobStartDetails.JobId, appId, envName, 2 * 1000, 2000 * 1000, amplifyBackendInstance.amplifyBackend);
        if (jobCompletionDetails.Status === 'COMPLETED') {
            spinner.succeed('Successfully generated models in the cloud.');
        }
        else {
            throw new Error('Modelgen job creation failed');
        }
    }
    catch (e) {
        spinner.stop();
        context.print.error(`Failed to create models in the cloud: ${e.message}`);
    }
}
exports.adminModelgen = adminModelgen;
async function pollUntilDone(jobId, appId, backendEnvironmentName, interval, timeout, amplifyBackendClient) {
    const start = Date.now();
    while (true) {
        const jobDetails = await amplifyBackendClient
            .getBackendJob({
            JobId: jobId,
            AppId: appId,
            BackendEnvironmentName: backendEnvironmentName,
        })
            .promise();
        if (jobDetails.Status === 'FAILED' || jobDetails.Status === 'COMPLETED') {
            return jobDetails;
        }
        else {
            if (timeout !== 0 && Date.now() - start > timeout) {
                throw new Error(`Job Timed out for ${jobId}`);
            }
            else {
                await delay(interval);
            }
        }
    }
}
function delay(t) {
    return new Promise(function (resolve) {
        setTimeout(resolve, t);
    });
}
//# sourceMappingURL=admin-modelgen.js.map