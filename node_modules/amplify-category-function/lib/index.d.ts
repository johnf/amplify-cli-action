export { category } from './constants';
import { BuildType } from 'amplify-function-plugin-interface';
import { $TSAny, $TSContext } from 'amplify-cli-core';
export { buildTypeKeyMap } from './provider-utils/awscloudformation/utils/buildFunction';
export { buildResource } from './provider-utils/awscloudformation/utils/build';
export { packageResource } from './provider-utils/awscloudformation/utils/package';
export { hashLayerResource } from './provider-utils/awscloudformation/utils/packageLayer';
export { ServiceName } from './provider-utils/awscloudformation/utils/constants';
export { isMultiEnvLayer } from './provider-utils/awscloudformation/utils/layerParams';
export { updateDependentFunctionsCfn } from './provider-utils/awscloudformation/utils/updateDependentFunctionCfn';
export { lambdasWithApiDependency } from './provider-utils/awscloudformation/utils/getDependentFunction';
export { askExecRolePermissionsQuestions } from './provider-utils/awscloudformation/service-walkthroughs/execPermissionsWalkthrough';
export declare function add(context: any, providerName: any, service: any, parameters: any): Promise<any>;
export declare function update(context: any, providerName: any, service: any, parameters: any, resourceToUpdate: any): Promise<any>;
export declare function console(context: any): Promise<void>;
export declare function migrate(context: any): Promise<void>;
export declare function getPermissionPolicies(context: any, resourceOpsMapping: any): Promise<{
    permissionPolicies: any[];
    resourceAttributes: any[];
}>;
export declare function initEnv(context: any): Promise<void>;
export declare function getInvoker(context: $TSContext, { handler, resourceName, envVars }: InvokerParameters): Promise<({ event: unknown }: {
    event: any;
}) => Promise<$TSAny>>;
export declare function getBuilder(context: $TSContext, resourceName: string, buildType: BuildType): () => Promise<void>;
export declare function isMockable(context: any, resourceName: string): IsMockableResponse;
export declare function executeAmplifyCommand(context: any): Promise<void>;
export declare function handleAmplifyEvent(context: any, args: any): Promise<void>;
export declare type InvokerParameters = {
    resourceName: string;
    handler: string;
    envVars?: {
        [key: string]: string;
    };
};
export interface IsMockableResponse {
    isMockable: boolean;
    reason?: string;
}
//# sourceMappingURL=index.d.ts.map