"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageFunction = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const functionPluginLoader_1 = require("./functionPluginLoader");
const packageFunction = async (context, resource) => {
    var _a;
    const resourcePath = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), resource.category, resource.resourceName);
    const runtimeManager = await functionPluginLoader_1.getRuntimeManager(context, resource.resourceName);
    const distDir = path.join(resourcePath, 'dist');
    fs.ensureDirSync(distDir);
    const destination = path.join(distDir, 'latest-build.zip');
    const packageRequest = {
        env: context.amplify.getEnvInfo().envName,
        srcRoot: resourcePath,
        dstFilename: destination,
        runtime: runtimeManager.runtime,
        lastPackageTimeStamp: resource.lastPackageTimeStamp ? new Date(resource.lastPackageTimeStamp) : undefined,
        lastBuildTimeStamp: resource.lastBuildTimeStamp ? new Date(resource.lastBuildTimeStamp) : undefined,
        skipHashing: resource.skipHashing,
    };
    const packageResult = await runtimeManager.package(packageRequest);
    const packageHash = packageResult.packageHash;
    const zipFilename = packageHash
        ? `${resource.resourceName}-${packageHash}-build.zip`
        : (_a = resource.distZipFilename) !== null && _a !== void 0 ? _a : `${resource.category}-${resource.resourceName}-build.zip`;
    context.amplify.updateAmplifyMetaAfterPackage(resource, zipFilename);
    return { zipFilename, zipFilePath: destination };
};
exports.packageFunction = packageFunction;
//# sourceMappingURL=packageFunction.js.map