"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateDependentFunctionsCfn = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const execPermissionsWalkthrough_1 = require("../service-walkthroughs/execPermissionsWalkthrough");
const lambda_walkthrough_1 = require("../service-walkthroughs/lambda-walkthrough");
const loadFunctionParameters_1 = require("./loadFunctionParameters");
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
const constants_2 = require("../../../constants");
async function updateDependentFunctionsCfn(context, dependentFunctionResource, backendDir, modelsDeleted, apiResource) {
    for (const lambda of dependentFunctionResource) {
        const resourceDirPath = path_1.default.join(backendDir, constants_2.category, lambda.resourceName);
        const currentParameters = loadFunctionParameters_1.loadFunctionParameters(context, resourceDirPath);
        const selectedCategories = currentParameters.permissions;
        let categoryPolicies = [];
        let permissions = {};
        let resources = [];
        const functionParameters = {
            resourceName: lambda.resourceName,
            environmentMap: {
                ENV: {
                    Ref: 'env',
                },
                REGION: {
                    Ref: 'AWS::Region',
                },
            },
        };
        for (const selectedCategory of Object.keys(selectedCategories)) {
            const selectedResources = selectedCategories[selectedCategory];
            for (const resourceName of Object.keys(selectedResources)) {
                if (!modelsDeleted.includes(resourceName)) {
                    const resourcePolicy = selectedResources[resourceName];
                    const { permissionPolicies, cfnResources } = await execPermissionsWalkthrough_1.getResourcesForCfn(context, resourceName, resourcePolicy, apiResource, selectedCategory);
                    categoryPolicies = categoryPolicies.concat(permissionPolicies);
                    if (!permissions[selectedCategory]) {
                        permissions[selectedCategory] = {};
                    }
                    permissions[selectedCategory][resourceName] = resourcePolicy;
                    resources = resources.concat(cfnResources);
                }
            }
        }
        const { environmentMap, dependsOn } = await execPermissionsWalkthrough_1.generateEnvVariablesForCfn(context, resources, {});
        functionParameters.categoryPolicies = categoryPolicies;
        functionParameters.mutableParametersState = { permissions };
        functionParameters.environmentMap = environmentMap;
        functionParameters.dependsOn = dependsOn;
        functionParameters.lambdaLayers = currentParameters.lambdaLayers;
        lambda_walkthrough_1.updateCFNFileForResourcePermissions(resourceDirPath, functionParameters, currentParameters, apiResource);
        currentParameters.permissions = permissions;
        const parametersFilePath = path_1.default.join(resourceDirPath, constants_1.functionParametersFileName);
        amplify_cli_core_1.JSONUtilities.writeJson(parametersFilePath, currentParameters);
        lambda.dependsOn = functionParameters.dependsOn;
        context.amplify.updateamplifyMetaAfterResourceUpdate(constants_2.category, lambda.resourceName, 'dependsOn', lambda.dependsOn);
    }
}
exports.updateDependentFunctionsCfn = updateDependentFunctionsCfn;
//# sourceMappingURL=updateDependentFunctionCfn.js.map