"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTypeKeyMap = exports.buildFunction = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const amplify_function_plugin_interface_1 = require("amplify-function-plugin-interface");
const path = __importStar(require("path"));
const constants_1 = require("../../../constants");
const buildFunction = async (context, { resourceName, lastBuildTimeStamp, buildType = amplify_function_plugin_interface_1.BuildType.PROD }) => {
    const resourcePath = path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), constants_1.category, resourceName);
    const breadcrumbs = context.amplify.readBreadcrumbs(constants_1.category, resourceName);
    const runtimePlugin = (await context.amplify.loadRuntimePlugin(context, breadcrumbs.pluginId));
    const depCheck = await runtimePlugin.checkDependencies(breadcrumbs.functionRuntime);
    if (!depCheck.hasRequiredDependencies) {
        context.print.error(depCheck.errorMessage || `You are missing dependencies required to package ${resourceName}`);
        throw new Error(`Missing required dependencies to package ${resourceName}`);
    }
    const prevBuildTime = lastBuildTimeStamp ? new Date(lastBuildTimeStamp) : undefined;
    let rebuilt = false;
    if (breadcrumbs.scripts && breadcrumbs.scripts.build) {
        throw new Error('Executing custom build scripts is not yet implemented');
    }
    else {
        const buildRequest = {
            buildType,
            srcRoot: resourcePath,
            runtime: breadcrumbs.functionRuntime,
            legacyBuildHookParams: {
                projectRoot: amplify_cli_core_1.pathManager.findProjectRoot(),
                resourceName: resourceName,
            },
            lastBuildTimeStamp: prevBuildTime,
        };
        rebuilt = (await runtimePlugin.build(buildRequest)).rebuilt;
    }
    if (rebuilt) {
        context.amplify.updateamplifyMetaAfterBuild({ category: constants_1.category, resourceName }, buildType.toString());
        return new Date().toISOString();
    }
    else {
        return lastBuildTimeStamp;
    }
};
exports.buildFunction = buildFunction;
exports.buildTypeKeyMap = {
    [amplify_function_plugin_interface_1.BuildType.PROD]: 'lastBuildTimeStamp',
    [amplify_function_plugin_interface_1.BuildType.DEV]: 'lastDevBuildTimeStamp',
};
//# sourceMappingURL=buildFunction.js.map