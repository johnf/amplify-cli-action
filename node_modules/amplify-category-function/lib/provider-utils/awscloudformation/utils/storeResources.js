"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveCFNParameters = exports.saveMutableState = exports.removeLayerArtifacts = exports.updateLayerArtifacts = exports.createLayerArtifacts = exports.createFunctionResources = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const lodash_1 = __importDefault(require("lodash"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
const constants_2 = require("../../../constants");
const lambda_layer_cloudformation_template_1 = require("./lambda-layer-cloudformation-template");
const layerParams_1 = require("./layerParams");
const layerArnConverter_1 = require("./layerArnConverter");
const layerRuntimes_1 = require("./layerRuntimes");
function createFunctionResources(context, parameters) {
    context.amplify.updateamplifyMetaAfterResourceAdd(constants_2.category, parameters.resourceName || parameters.functionName, translateFuncParamsToResourceOpts(parameters));
    copyTemplateFiles(context, parameters);
    saveMutableState(parameters);
    saveCFNParameters(parameters);
    context.amplify.leaveBreadcrumbs(constants_2.category, parameters.resourceName, createBreadcrumbs(parameters));
}
exports.createFunctionResources = createFunctionResources;
const createLayerArtifacts = (context, parameters, latestVersion = 1) => {
    const layerDirPath = ensureLayerFolders(parameters);
    updateLayerState(context, parameters, layerDirPath);
    createParametersFile({ layerVersion: latestVersion }, parameters.layerName, constants_1.parametersFileName);
    createLayerCfnFile(context, parameters, layerDirPath);
    addLayerToAmplifyMeta(context, parameters);
    return layerDirPath;
};
exports.createLayerArtifacts = createLayerArtifacts;
const defaultOpts = {
    layerParams: true,
    cfnFile: true,
    amplifyMeta: true,
};
const updateLayerArtifacts = (context, parameters, latestVersion, options = {}) => {
    options = lodash_1.default.assign(defaultOpts, options);
    const layerDirPath = ensureLayerFolders(parameters);
    if (options.layerParams) {
        updateLayerState(context, parameters, layerDirPath);
    }
    if (options.cfnFile) {
        if (latestVersion !== undefined) {
            createParametersFile({ layerVersion: latestVersion }, parameters.layerName, constants_1.parametersFileName);
        }
        updateLayerCfnFile(context, parameters, layerDirPath);
    }
    if (options.amplifyMeta) {
        updateLayerInAmplifyMeta(context, parameters);
    }
    return layerDirPath;
};
exports.updateLayerArtifacts = updateLayerArtifacts;
function removeLayerArtifacts(context, layerName) {
    if (layerParams_1.isMultiEnvLayer(context, layerName)) {
        removeLayerFromTeamProviderInfo(context, layerName);
    }
}
exports.removeLayerArtifacts = removeLayerArtifacts;
function saveMutableState(parameters) {
    createParametersFile(buildParametersFileObj(parameters), parameters.resourceName || parameters.functionName, constants_1.functionParametersFileName);
}
exports.saveMutableState = saveMutableState;
function saveCFNParameters(parameters) {
    if ('trigger' in parameters) {
        const params = {
            modules: parameters.modules.join(),
            resourceName: parameters.resourceName,
        };
        createParametersFile(params, parameters.resourceName, constants_1.parametersFileName);
    }
    if ('cloudwatchRule' in parameters) {
        const params = {
            CloudWatchRule: parameters.cloudwatchRule,
        };
        createParametersFile(params, parameters.resourceName, constants_1.parametersFileName);
    }
}
exports.saveCFNParameters = saveCFNParameters;
function updateLayerState(context, parameters, layerDirPath) {
    if (layerParams_1.isMultiEnvLayer(context, parameters.layerName)) {
        updateLayerTeamProviderInfo(context, parameters, layerDirPath);
        layerRuntimes_1.saveLayerRuntimes(layerDirPath, parameters.layerName, parameters.runtimes);
    }
    else {
        createLayerParametersFile(parameters, layerDirPath, layerParams_1.isMultiEnvLayer(context, parameters.layerName));
    }
}
function copyTemplateFiles(context, parameters) {
    const destDir = amplify_cli_core_1.pathManager.getBackendDirPath();
    const copyJobs = parameters.functionTemplate.sourceFiles.map(file => {
        return {
            dir: parameters.functionTemplate.sourceRoot,
            template: file,
            target: path_1.default.join(destDir, constants_2.category, parameters.resourceName, lodash_1.default.get(parameters.functionTemplate.destMap, file, file.replace(/\.ejs$/, ''))),
        };
    });
    let templateParams = parameters;
    if ('trigger' in parameters) {
        let triggerEnvs = context.amplify.loadEnvResourceParameters(context, 'function', parameters.resourceName);
        parameters.triggerEnvs = amplify_cli_core_1.JSONUtilities.parse(parameters.triggerEnvs) || [];
        parameters.triggerEnvs.forEach(c => {
            triggerEnvs[c.key] = c.value;
        });
        templateParams = lodash_1.default.assign(templateParams, triggerEnvs);
    }
    templateParams = lodash_1.default.assign(templateParams, {
        enableCors: process.env.AMPLIFY_CLI_LAMBDA_CORS_HEADER === 'true',
    });
    context.amplify.copyBatch(context, copyJobs, templateParams, false);
    const cloudTemplateJob = {
        dir: '',
        template: parameters.cloudResourceTemplatePath,
        target: path_1.default.join(destDir, constants_2.category, parameters.resourceName, `${parameters.resourceName}-cloudformation-template.json`),
    };
    const copyJobParams = parameters;
    if ('lambdaLayers' in parameters) {
        const layerCFNValues = layerArnConverter_1.convertLambdaLayerMetaToLayerCFNArray(context, parameters.lambdaLayers, context.amplify.getEnvInfo().envName);
        copyJobParams.lambdaLayersCFNArray = layerCFNValues;
    }
    context.amplify.copyBatch(context, [cloudTemplateJob], copyJobParams, false);
}
function ensureLayerFolders(parameters) {
    const projectBackendDirPath = amplify_cli_core_1.pathManager.getBackendDirPath();
    const layerDirPath = path_1.default.join(projectBackendDirPath, constants_2.category, parameters.layerName);
    fs_extra_1.default.ensureDirSync(path_1.default.join(layerDirPath, 'opt'));
    parameters.runtimes.forEach(runtime => ensureLayerRuntimeFolder(layerDirPath, runtime));
    return layerDirPath;
}
function ensureLayerRuntimeFolder(layerDirPath, runtime) {
    const runtimeDirPath = path_1.default.join(layerDirPath, 'lib', runtime.layerExecutablePath);
    if (!fs_extra_1.default.pathExistsSync(runtimeDirPath)) {
        fs_extra_1.default.ensureDirSync(runtimeDirPath);
        fs_extra_1.default.writeFileSync(path_1.default.join(runtimeDirPath, 'README.txt'), 'Replace this file with your layer files');
        (runtime.layerDefaultFiles || []).forEach(defaultFile => fs_extra_1.default.writeFileSync(path_1.default.join(layerDirPath, 'lib', defaultFile.path, defaultFile.filename), defaultFile.content));
    }
}
function createLayerCfnFile(context, parameters, layerDirPath) {
    amplify_cli_core_1.JSONUtilities.writeJson(path_1.default.join(layerDirPath, parameters.layerName + '-awscloudformation-template.json'), lambda_layer_cloudformation_template_1.generateLayerCfnObj(context, parameters));
}
function updateLayerCfnFile(context, parameters, layerDirPath) {
    amplify_cli_core_1.JSONUtilities.writeJson(path_1.default.join(layerDirPath, parameters.layerName + '-awscloudformation-template.json'), lambda_layer_cloudformation_template_1.generateLayerCfnObj(context, parameters));
}
const writeParametersToAmplifyMeta = (context, layerName, parameters) => {
    const amplifyMeta = context.amplify.getProjectMeta();
    lodash_1.default.set(amplifyMeta, ['function', layerName], parameters);
    amplify_cli_core_1.JSONUtilities.writeJson(amplify_cli_core_1.pathManager.getAmplifyMetaFilePath(), amplifyMeta);
};
const addLayerToAmplifyMeta = (context, parameters) => {
    context.amplify.updateamplifyMetaAfterResourceAdd(constants_2.category, parameters.layerName, amplifyMetaAndBackendParams(parameters));
    writeParametersToAmplifyMeta(context, parameters.layerName, layerParamsToAmplifyMetaParams(parameters, layerParams_1.isMultiEnvLayer(context, parameters.layerName)));
};
const updateLayerInAmplifyMeta = (context, parameters) => {
    writeParametersToAmplifyMeta(context, parameters.layerName, layerParamsToAmplifyMetaParams(parameters, layerParams_1.isMultiEnvLayer(context, parameters.layerName)));
};
const createLayerParametersFile = (parameters, layerDirPath, isMultiEnv) => {
    fs_extra_1.default.ensureDirSync(layerDirPath);
    const parametersFilePath = path_1.default.join(layerDirPath, constants_1.layerParametersFileName);
    amplify_cli_core_1.JSONUtilities.writeJson(parametersFilePath, layerParamsToStoredParams(parameters, isMultiEnv));
};
const updateLayerTeamProviderInfo = (context, parameters, layerDirPath) => {
    fs_extra_1.default.ensureDirSync(layerDirPath);
    const { envName } = context.amplify.getEnvInfo();
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo();
    lodash_1.default.set(teamProviderInfo, [envName, 'nonCFNdata', constants_2.category, parameters.layerName], layerParamsToStoredParams(parameters, layerParams_1.isMultiEnvLayer(context, parameters.layerName)));
    amplify_cli_core_1.stateManager.setTeamProviderInfo(undefined, teamProviderInfo);
};
const removeLayerFromTeamProviderInfo = (context, layerName) => {
    const { envName } = context.amplify.getEnvInfo();
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo();
    lodash_1.default.unset(teamProviderInfo, [envName, 'nonCFNdata', constants_2.category, layerName]);
    if (lodash_1.default.isEmpty(lodash_1.default.get(teamProviderInfo, [envName, 'nonCFNdata', constants_2.category]))) {
        lodash_1.default.unset(teamProviderInfo, [envName, 'nonCFNdata', constants_2.category]);
        if (lodash_1.default.isEmpty(lodash_1.default.get(teamProviderInfo, [envName, 'nonCFNdata']))) {
            lodash_1.default.unset(teamProviderInfo, [envName, 'nonCFNdata']);
        }
    }
    amplify_cli_core_1.stateManager.setTeamProviderInfo(undefined, teamProviderInfo);
};
const amplifyMetaAndBackendParams = (parameters) => ({
    providerPlugin: parameters.providerContext.provider,
    service: parameters.providerContext.service,
    build: parameters.build,
});
const layerParamsToAmplifyMetaParams = (parameters, isMultiEnv) => {
    const amplifyMetaBackendParams = amplifyMetaAndBackendParams(parameters);
    return lodash_1.default.assign(layerParamsToStoredParams(parameters, isMultiEnv), amplifyMetaBackendParams);
};
const layerParamsToStoredParams = (parameters, isMultiEnv) => {
    const storedParams = { layerVersionMap: parameters.layerVersionMap };
    if (!isMultiEnv) {
        storedParams.runtimes = (parameters.runtimes || []).map(runtime => lodash_1.default.pick(runtime, 'value', 'name', 'layerExecutablePath', 'cloudTemplateValue'));
    }
    return storedParams;
};
function createParametersFile(parameters, resourceName, parametersFileName) {
    const parametersFilePath = path_1.default.join(amplify_cli_core_1.pathManager.getBackendDirPath(), constants_2.category, resourceName, parametersFileName);
    const currentParameters = amplify_cli_core_1.JSONUtilities.readJson(parametersFilePath, { throwIfNotExist: false }) || {};
    delete currentParameters.mutableParametersState;
    amplify_cli_core_1.JSONUtilities.writeJson(parametersFilePath, { ...currentParameters, ...parameters });
}
function buildParametersFileObj(parameters) {
    if ('trigger' in parameters) {
        return lodash_1.default.omit(parameters, ['functionTemplate', 'cloudResourceTemplatePath']);
    }
    return { ...parameters.mutableParametersState, ...lodash_1.default.pick(parameters, ['lambdaLayers']) };
}
function translateFuncParamsToResourceOpts(params) {
    let result = {
        build: true,
        providerPlugin: constants_1.provider,
        service: "Lambda",
    };
    if (!('trigger' in params)) {
        result.dependsOn = params.dependsOn;
    }
    return result;
}
function createBreadcrumbs(params) {
    if ('trigger' in params) {
        return {
            pluginId: 'amplify-nodejs-function-runtime-provider',
            functionRuntime: 'nodejs',
            useLegacyBuild: true,
            defaultEditorFile: 'src/index.js',
        };
    }
    return {
        pluginId: params.runtimePluginId,
        functionRuntime: params.runtime.value,
        useLegacyBuild: params.runtime.value === 'nodejs' ? true : false,
        defaultEditorFile: params.functionTemplate.defaultEditorFile,
    };
}
//# sourceMappingURL=storeResources.js.map